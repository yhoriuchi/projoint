[{"path":"https://yhoriuchi.github.io/projoint/articles/analyze.html","id":"estimate-corrected-mms-or-amces","dir":"Articles","previous_headings":"","what":"üéØ Estimate Corrected MMs or AMCEs","title":"Analyze and Visualize Important QOIs","text":"conjoint analysis, default MMs AMCEs can biased due measurement error intra-respondent variability. projoint corrects bias automatically. following instructions apply choice-level data. profile-level data?‚ìò FAQ Page instructions estimate visualize profile-level QOIs.","code":""},{"path":"https://yhoriuchi.github.io/projoint/articles/analyze.html","id":"prepare-example-data","dir":"Articles","previous_headings":"","what":"üì¶ Prepare Example Data","title":"Analyze and Visualize Important QOIs","text":"Outcome naming & order (important) List .outcomes order questions asked. repeated task, outcome must last element. base tasks (last), function reads digits name task id (e.g., \"choice4\", \"Q4\", \"task04\" ‚Üí task 4). repeated base task inferred first base outcome‚Äôs digits. repeated outcome need contain digits‚Äîposition (last) matters. Outcome strings end choice labels; default parse last character expect \"\"/\"B\". survey uses \"1\"/\"2\" (endings), set .choice_labels accordingly. Examples","code":"# Standard order; repeated = task 1 data(\"exampleData1\") outcomes <- c(paste0(\"choice\", 1:8), \"choice1_repeated_flipped\") out1 <- reshape_projoint(exampleData1, outcomes)"},{"path":"https://yhoriuchi.github.io/projoint/articles/analyze.html","id":"why-use-ids-e-g--att1-level1","dir":"Articles","previous_headings":"","what":"üõ†Ô∏è Why Use IDs (e.g., att1, level1)?","title":"Analyze and Visualize Important QOIs","text":"estimating quantities, ‚Äôs important understand attribute level IDs work inside projoint. recommend working attribute IDs rather actual text labels : Safer special characters, languages, typos Allows multiple attributes identical labels (e.g., ‚ÄúHigh‚Äù ‚ÄúTeaching Quality‚Äù ‚ÄúResearch Quality‚Äù) Check attribute-level mappings: can also save labels easier editing:","code":"out1$labels ## # A tibble: 24 √ó 4 ##    attribute                level                        attribute_id level_id   ##    <chr>                    <chr>                        <chr>        <chr>      ##  1 Housing Cost             15% of pre-tax income        att1         att1:leve‚Ä¶ ##  2 Housing Cost             30% of pre-tax income        att1         att1:leve‚Ä¶ ##  3 Housing Cost             40% of pre-tax income        att1         att1:leve‚Ä¶ ##  4 Presidential Vote (2020) 30% Democrat, 70% Republican att2         att2:leve‚Ä¶ ##  5 Presidential Vote (2020) 50% Democrat, 50% Republican att2         att2:leve‚Ä¶ ##  6 Presidential Vote (2020) 70% Democrat, 30% Republican att2         att2:leve‚Ä¶ ##  7 Racial Composition       50% White, 50% Nonwhite      att3         att3:leve‚Ä¶ ##  8 Racial Composition       75% White, 25% Nonwhite      att3         att3:leve‚Ä¶ ##  9 Racial Composition       90% White, 10% Nonwhite      att3         att3:leve‚Ä¶ ## 10 Racial Composition       96% White, 4% Nonwhite       att3         att3:leve‚Ä¶ ## # ‚Ñπ 14 more rows save_labels(out1, \"labels.csv\")"},{"path":"https://yhoriuchi.github.io/projoint/articles/analyze.html","id":"estimate-marginal-means-mms","dir":"Articles","previous_headings":"","what":"üìà Estimate Marginal Means (MMs)","title":"Analyze and Visualize Important QOIs","text":"Suppose want estimate, within given profile pair, probability choosing profile includes ‚Äú40% pre-tax income‚Äù (level3) Housing Cost (att1) rather one includes ‚Äú15% pre-tax income‚Äù (level1) attribute, averaging combinations attributes across respondents; use following code:","code":"qoi <- set_qoi(   .structure = \"choice_level\",   .att_choose = \"att1\",   .lev_choose = \"level3\",   .att_notchoose = \"att1\",   .lev_notchoose = \"level1\" )  mm2 <- projoint(out1, qoi) print(mm2) ##  ## Projoint results object ## ------------------------- ## Estimand:  mm  ## Structure:  choice_level  ## Standard error method:  analytical  ## IRR:  Estimated  ## Tau:  0.172  ## Number of estimates:  2 summary(mm2) ##  ## Summary of Projoint Estimates ## ------------------------------ ## Estimand: mm ## Structure: choice_level ## Standard error method: analytical ## SE type (lm_robust):   CR2 (clustered by id) ## IRR: Estimated ## Tau: 0.172 ## # A tibble: 2 √ó 7 ##   estimand       estimate     se conf.low conf.high att_level_choose ##   <chr>             <dbl>  <dbl>    <dbl>     <dbl> <chr>            ## 1 mm_uncorrected    0.419 0.0197    0.380     0.458 att1:level3      ## 2 mm_corrected      0.376 0.0308    0.316     0.437 att1:level3      ## # ‚Ñπ 1 more variable: att_level_notchoose <chr>"},{"path":"https://yhoriuchi.github.io/projoint/articles/analyze.html","id":"estimate-amces","dir":"Articles","previous_headings":"","what":"üìâ Estimate AMCEs","title":"Analyze and Visualize Important QOIs","text":"Suppose want quantify choice probability changes following profile pairs: choosing profile includes ‚Äú40% pre-tax income‚Äù (level3) Housing Cost (att1) versus one includes ‚Äú15% pre-tax income‚Äù (level1) Housing Cost (att1); [baseline] choosing profile includes ‚Äú30% pre-tax income‚Äù (level2) Housing Cost (att1) versus one includes ‚Äú15% pre-tax income‚Äù (level1) Housing Cost (att1); averaging combinations attributes across respondents. write following code:","code":"qoi <- set_qoi(   .structure = \"choice_level\",   .estimand = \"amce\",   .att_choose = \"att1\",   .lev_choose = \"level3\",   .att_notchoose = \"att1\",   .lev_notchoose = \"level1\",   .att_choose_b = \"att1\",   .lev_choose_b = \"level2\",   .att_notchoose_b = \"att1\",   .lev_notchoose_b = \"level1\" )  amce2 <- projoint(out1, qoi) print(amce2) ##  ## Projoint results object ## ------------------------- ## Estimand:  amce  ## Structure:  choice_level  ## Standard error method:  analytical  ## IRR:  Estimated  ## Tau:  0.172  ## Number of estimates:  2 summary(amce2) ##  ## Summary of Projoint Estimates ## ------------------------------ ## Estimand: amce ## Structure: choice_level ## Standard error method: analytical ## SE type (lm_robust):   CR2 (clustered by id) ## IRR: Estimated ## Tau: 0.172 ## # A tibble: 2 √ó 9 ##   estimand         estimate     se conf.low conf.high att_level_choose ##   <chr>               <dbl>  <dbl>    <dbl>     <dbl> <chr>            ## 1 amce_uncorrected  -0.0135 0.0269  -0.0665    0.0394 att1:level3      ## 2 amce_corrected    -0.0206 0.0412  -0.102     0.0604 att1:level3      ## # ‚Ñπ 3 more variables: att_level_notchoose <chr>, ## #   att_level_choose_baseline <chr>, att_level_notchoose_baseline <chr>"},{"path":"https://yhoriuchi.github.io/projoint/articles/analyze.html","id":"predict-intra-respondent-reliability-irr","dir":"Articles","previous_headings":"","what":"üîé Predict Intra-Respondent Reliability (IRR)","title":"Analyze and Visualize Important QOIs","text":"design include repeated task, can predict IRR using predict_tau(), based observed respondent behavior.","code":"data(out1_arranged) predicted_irr <- predict_tau(out1_arranged)  print(predicted_irr) ## Tau estimated using the extrapolation method: 0.743 summary(predicted_irr) ## # A tibble: 8 √ó 2 ##       x predicted ##   <int>     <dbl> ## 1     0     0.743 ## 2     1     0.709 ## 3     2     0.675 ## 4     3     0.640 ## 5     4     0.606 ## 6     5     0.572 ## 7     6     0.537 ## 8     7     0.503 plot(predicted_irr)"},{"path":"https://yhoriuchi.github.io/projoint/articles/analyze.html","id":"visualize-mms-or-amces","dir":"Articles","previous_headings":"","what":"üé® Visualize MMs or AMCEs","title":"Analyze and Visualize Important QOIs","text":"projoint package provides ready--publish plotting tools conjoint analysis results. Note: current version projoint supports plotting choice-level MMs . Support choice-level AMCEs available future updates!","code":""},{"path":"https://yhoriuchi.github.io/projoint/articles/analyze.html","id":"choice-level-analysis","dir":"Articles","previous_headings":"üé® Visualize MMs or AMCEs","what":"‚öñÔ∏è Choice-Level Analysis","title":"Analyze and Visualize Important QOIs","text":"Specify quantity interest: Estimate üè† Home: Home","code":"qoi_mm <- set_qoi(   .structure = \"choice_level\", # default   .att_choose = \"att1\",    .lev_choose = \"level1\",    .att_notchoose = \"att1\",    .lev_notchoose = \"level3\" ) choice_mm <- projoint(   .data = out1_arranged,    .qoi = qoi_mm,    .ignore_position = TRUE ) plot(choice_mm) plot(choice_mm, .type = \"pointrange\")"},{"path":"https://yhoriuchi.github.io/projoint/articles/correct.html","id":"why-correct-for-measurement-error","dir":"Articles","previous_headings":"","what":"Why Correct for Measurement Error?","title":"Correct Measurement-Error Bias","text":"conjoint experiments, measurement error pervasive often overlooked. Misread attributes Misunderstand levels Click randomly Forget information across tasks result, respondents‚Äô recorded choices often refelect random noise. random error leads attenuate true prefernces (true effects).","code":""},{"path":[]},{"path":"https://yhoriuchi.github.io/projoint/articles/correct.html","id":"how-projoint-corrects-for-measurement-error","dir":"Articles","previous_headings":"","what":"How projoint Corrects for Measurement Error","title":"Correct Measurement-Error Bias","text":"Estimates intra-respondent reliability (IRR) based responses repeated task Adjusts marginal means (MMs) average marginal component effects (AMCEs) accordingly Provides corrected estimates better reflect respondents‚Äô true preferences Corrected estimates reveal true magnitude effects, improving theoretical applied inferences political science, marketing, fields. ‚úÖ additional respondent burden (just one repeated task) ‚úÖ Minimal survey design changes ‚úÖ Massive improvements accuracy","code":""},{"path":"https://yhoriuchi.github.io/projoint/articles/correct.html","id":"key-takeaway","dir":"Articles","previous_headings":"","what":"Key Takeaway","title":"Correct Measurement-Error Bias","text":"üß† Measurement error systematically biases results. üî• Correcting measurement error reveals true preferences, sharper trade-offs, prevents misleading inferences.","code":""},{"path":"https://yhoriuchi.github.io/projoint/articles/correct.html","id":"key-reference","dir":"Articles","previous_headings":"","what":"üìö Key Reference","title":"Correct Measurement-Error Bias","text":"Clayton, Horiuchi, Kaufman, King, Komisarchik (Forthcoming). ‚ÄúCorrecting Measurement Error Bias Conjoint Survey Experiments.‚ÄùForthcoming, American Journal Political Science.Pre-Print Available","code":""},{"path":"https://yhoriuchi.github.io/projoint/articles/design.html","id":"set-up-your-survey-using-the-projoint-survey-design-tool","dir":"Articles","previous_headings":"","what":"Set Up Your Survey Using the Projoint Survey Design Tool","title":"Design Your Survey","text":"Using Projoint Survey Design Tool, can easily: Set attributes levels Randomize attributes levels weights Add cross-attributes cross-profile constraints Automatically create repeated task intra-respondent reliability (IRR) estimation Generate test responses checking design üöÄ Export survey directly Qualtrics (QSF format) ‚úÖ","code":""},{"path":"https://yhoriuchi.github.io/projoint/articles/design.html","id":"how-to-use-the-projoint-survey-design-tool","dir":"Articles","previous_headings":"","what":"How to Use the Projoint Survey Design Tool","title":"Design Your Survey","text":"following instructions taken directly Projoint Survey Design Tool‚Äôs Tutorial section. important part discrete choice experiment setting attributes levels: features getting randomized. Add attributes clicking ‚ÄúAdd Attribute‚Äù button, add levels clicking ‚ÄúAdd Level‚Äù button. two advanced options page users add attributes levels. first controls order attributes appear respondents. clicking padlock icon right attribute, user can control appear. locked icon always appear indicated position, second attribute locked, attribute always appear second list attributes shown respondents. second advanced option controls randomization weights, can accesed clicking ‚ÄúEdit Weights‚Äù button. allows researchers set frequently level appear. choice experiments set level equal frequency, necessarily preferred. set attributes levels, recommend going Preview screen preview study. produces single task, can refreshed, researcher can see respondents see. Number profiles: defaults 2, binary comparison, can positive integer. recommend 5. Number tasks: number distinct comparison tasks respondent sees. tasks produces data, also potentially fatigues respondent. Repeated task: toggles whether one tasks respondents see exact duplicate previous task. comparing rate respondents give answer identical questions, possible measure correct certain type measurement error conjoint studies. strongly recommend turning . Repeated task shuffled: Option either flip columns repeated tasks. task repeat?: tasks repeated? can range 1 N N number tasks. repeat?: repeated task go? can range K K index task repeated N+1 N number tasks. Ordering attributes: order attributes randomized? three options Non random, Participant randomized, Task randomized. Non-random says every respondent every task attribute order: one specified . Participant-randomized says participant sees different attribute order, attribute order participant‚Äôs tasks. words, participant sees one ordering attributes. Task-randomized says every task independently-randomized attribute order. recommend Participant-randomized less confusing participants. two types restrictions discuss: cross-attribute restrictions cross-profile restrictions. Cross-attribute restrictions prevent profile logically inconsistent. example, conjoint study comparing potential immigrants, immigrant middle school education, career neurosurgeon. Cross-profile restrictions produce dependencies across different profiles one task. example, conjoint study comparing political candidates two-party, one candidate polling 60%, must polling 40% less. four options exporting survey, recommend users least three : Exporting CSV produces user-specified number test data indicating attributes levels number random tasks. recommend using double-check restrictions randomization weights successfully applied, well conduct power analysis. Exporting JSON produces file containing information user set defining survey. recommend saving can recreate survey settings clear cookies. JSON file can imported web tool, automating process. Exporting JavaScript (JS) produces file can uploaded Qualtrics perform randomization. Exporting Qualtrics produces .QSF file can loaded Qualtrics, automatically populating survey appropriate randomization correct question tasks.","code":""},{"path":"https://yhoriuchi.github.io/projoint/articles/design.html","id":"other-options","dir":"Articles","previous_headings":"","what":"Other Options","title":"Design Your Survey","text":"interested researchers previously set conjoint surveys, see FAQ Page instructions using alternative tools‚ìò üè† Home: Home","code":""},{"path":"https://yhoriuchi.github.io/projoint/articles/explore.html","id":"explore-and-compare-further","dir":"Articles","previous_headings":"","what":"üåü Explore and Compare Further","title":"Explore and Compare Further","text":"Choice-level analysis opens door many new research questions traditional profile-level analysis often overlooks. , demonstrate estimate deeper quantities compare subgroups effectively. Depending objectives, may want reorganize data projoint_data object. helper function internal package, can call explicitly script.‚Äù","code":"projoint_data <- function(labels, data) {   structure(     list(labels = labels, data = data),     class = \"projoint_data\"   ) }"},{"path":"https://yhoriuchi.github.io/projoint/articles/explore.html","id":"setup","dir":"Articles","previous_headings":"","what":"üì¶ Setup","title":"Explore and Compare Further","text":"use already wrangled cleaned data out1_arranged.","code":"data(\"out1_arranged\") out1_arranged$labels ## # A tibble: 24 √ó 4 ##    attribute                     level                   attribute_id level_id   ##    <chr>                         <chr>                   <chr>        <chr>      ##  1 Housing Cost (Pre-tax Income) 15%                     att1         att1:leve‚Ä¶ ##  2 Housing Cost (Pre-tax Income) 30%                     att1         att1:leve‚Ä¶ ##  3 Housing Cost (Pre-tax Income) 40%                     att1         att1:leve‚Ä¶ ##  4 Presidential Vote (2020)      50% Dem, 50% Rep        att2         att2:leve‚Ä¶ ##  5 Presidential Vote (2020)      30% Dem, 70% Rep        att2         att2:leve‚Ä¶ ##  6 Presidential Vote (2020)      70% Dem, 30% Rep        att2         att2:leve‚Ä¶ ##  7 Racial Composition            50% White, 50% Nonwhite att3         att3:leve‚Ä¶ ##  8 Racial Composition            75% White, 25% Nonwhite att3         att3:leve‚Ä¶ ##  9 Racial Composition            90% White, 10% Nonwhite att3         att3:leve‚Ä¶ ## 10 Racial Composition            96% White, 4% Nonwhite  att3         att3:leve‚Ä¶ ## # ‚Ñπ 14 more rows"},{"path":"https://yhoriuchi.github.io/projoint/articles/explore.html","id":"explore-compare-trade-offs-directly","dir":"Articles","previous_headings":"","what":"‚öñÔ∏è Explore: Compare Trade-offs Directly","title":"Explore and Compare Further","text":"Goal. Compare choices two joint profiles: Low housing cost high violent‚Äëcrime rate, versus High housing cost low violent‚Äëcrime rate. (Optional) Sanity checks Recreate projoint_data object, set QOI, plot.","code":"# 1) Data: keep only the two joint profiles of interest data(\"out1_arranged\") d1 <- out1_arranged$data d2 <- d1 |>    mutate(y1 = case_when(     # Low housing cost, high crime     att1 == \"att1:level1\" & att6 == \"att6:level2\" ~ 1,     TRUE ~ 0   ),   y0 = case_when(     # High housing cost, low crime     att1 == \"att1:level3\" & att6 == \"att6:level1\" ~ 1,     TRUE ~ 0   )) |>    filter(y1 == 1 | y0 == 1)  # 2) Labels: rename only the two att1 levels to reflect the joint trade-offs labels1 <- out1_arranged$labels labels2 <- labels1 |>    mutate(level = case_when(level_id == \"att1:level1\" ~ \"Housing Cost (Low)\\nCrime Rate(High)\",                             level_id == \"att1:level3\" ~ \"Housing Cost (High)\\nCrime Rate(Low)\",                             TRUE ~ level_id)) d1 |> count(att1, att6) ## # A tibble: 6 √ó 3 ##   att1        att6            n ##   <chr>       <chr>       <int> ## 1 att1:level1 att6:level1  1045 ## 2 att1:level1 att6:level2  1069 ## 3 att1:level2 att6:level1  1121 ## 4 att1:level2 att6:level2  1034 ## 5 att1:level3 att6:level1  1059 ## 6 att1:level3 att6:level2  1072 d2 |> count(att1, att6) # only the two joint profiles remain ## # A tibble: 2 √ó 3 ##   att1        att6            n ##   <chr>       <chr>       <int> ## 1 att1:level1 att6:level2  1069 ## 2 att1:level3 att6:level1  1059 labels1 |> filter(attribute_id == \"att1\") ## # A tibble: 3 √ó 4 ##   attribute                     level attribute_id level_id    ##   <chr>                         <chr> <chr>        <chr>       ## 1 Housing Cost (Pre-tax Income) 15%   att1         att1:level1 ## 2 Housing Cost (Pre-tax Income) 30%   att1         att1:level2 ## 3 Housing Cost (Pre-tax Income) 40%   att1         att1:level3 labels2 |> filter(attribute_id == \"att1\" & level_id %in% c(\"att1:level1\", \"att1:level3\")) ## # A tibble: 2 √ó 4 ##   attribute                     level                      attribute_id level_id ##   <chr>                         <chr>                      <chr>        <chr>    ## 1 Housing Cost (Pre-tax Income) \"Housing Cost (Low)\\nCrim‚Ä¶ att1         att1:le‚Ä¶ ## 2 Housing Cost (Pre-tax Income) \"Housing Cost (High)\\nCri‚Ä¶ att1         att1:le‚Ä¶ # 3) Build a new projoint_data object pj_data_wrangled <- projoint_data(\"labels\" = labels2,                                    \"data\" = d2)  # 4) Quantity of interest: Low vs High housing cost under the specified crime conditions (choice-level MM) qoi <- set_qoi(   .att_choose = \"att1\",    .lev_choose = \"level1\", # Low housing cost (with high crime in this subset)   .att_notchoose = \"att1\",    .lev_notchoose = \"level3\" # High housing cost (with low crime in this subset) )  # 5) Estimate and plot (horizontal layout) out <- projoint(pj_data_wrangled, qoi) plot(out)"},{"path":"https://yhoriuchi.github.io/projoint/articles/explore.html","id":"explore-compare-multiple-levels-simultaneously","dir":"Articles","previous_headings":"","what":"üß© Explore: Compare Multiple Levels Simultaneously","title":"Explore and Compare Further","text":"Goal. Collapse att7 two buckets‚ÄîCity (levels 1‚Äì2) vs.¬†Suburban (levels 5‚Äì6)‚Äîre‚Äëestimate plot. (Optional) Sanity checks Recreate projoint_data object, set QOI, plot.","code":"# 1) Data: collapse levels for att7 d1 <- out1_arranged$data d2 <- d1 |>   mutate(     att7 = case_when(       att7 %in% c(\"att7:level1\", \"att7:level2\") ~ \"att7:level7\",  # City       att7 %in% c(\"att7:level5\", \"att7:level6\") ~ \"att7:level8\",  # Suburban       TRUE ~ att7     )   )  # 2) Labels: create matching level IDs and readable names labels1 <- out1_arranged$labels labels2 <- labels1 |>   mutate(     level_id = case_when(       level_id %in% c(\"att7:level1\", \"att7:level2\") ~ \"att7:level7\",       level_id %in% c(\"att7:level5\", \"att7:level6\") ~ \"att7:level8\",       TRUE ~ level_id     ),     level = case_when(       level_id == \"att7:level7\" ~ \"City\",       level_id == \"att7:level8\" ~ \"Suburban\",       TRUE ~ level     )   ) |>   distinct() d1 |> count(att7) ## # A tibble: 6 √ó 2 ##   att7            n ##   <chr>       <int> ## 1 att7:level1  1032 ## 2 att7:level2  1047 ## 3 att7:level3  1117 ## 4 att7:level4  1092 ## 5 att7:level5  1045 ## 6 att7:level6  1067 d2 |> count(att7) ## # A tibble: 4 √ó 2 ##   att7            n ##   <chr>       <int> ## 1 att7:level3  1117 ## 2 att7:level4  1092 ## 3 att7:level7  2079 ## 4 att7:level8  2112 labels1 |> filter(attribute_id == \"att7\") ## # A tibble: 6 √ó 4 ##   attribute     level                       attribute_id level_id    ##   <chr>         <chr>                       <chr>        <chr>       ## 1 Type of Place City, more residential area att7         att7:level1 ## 2 Type of Place City, downtown area         att7         att7:level2 ## 3 Type of Place Rural area                  att7         att7:level3 ## 4 Type of Place Small town                  att7         att7:level4 ## 5 Type of Place Suburban, only houses       att7         att7:level5 ## 6 Type of Place Suburban, downtown area     att7         att7:level6 labels2 |> filter(attribute_id == \"att7\") ## # A tibble: 4 √ó 4 ##   attribute     level      attribute_id level_id    ##   <chr>         <chr>      <chr>        <chr>       ## 1 Type of Place City       att7         att7:level7 ## 2 Type of Place Rural area att7         att7:level3 ## 3 Type of Place Small town att7         att7:level4 ## 4 Type of Place Suburban   att7         att7:level8 # 3) Build a new projoint_data object pj_data_wrangled <- projoint_data(\"labels\" = labels2,                                    \"data\" = d2)  # 4) Quantity of interest: City vs. Suburban (choice-level MM) qoi <- set_qoi(   .structure     = \"choice_level\",   .att_choose    = \"att7\",   .lev_choose    = \"level7\",  # City   .att_notchoose = \"att7\",   .lev_notchoose = \"level8\"   # Suburban )  # 5) Estimate and plot (horizontal layout) out <- projoint(pj_data_wrangled, qoi) plot(out)"},{"path":"https://yhoriuchi.github.io/projoint/articles/explore.html","id":"compare-subgroup-differences","dir":"Articles","previous_headings":"","what":"üìä Compare: Subgroup Differences","title":"Explore and Compare Further","text":"üè† Home: Home","code":"data(\"exampleData1\")  outcomes <- c(paste0(\"choice\", 1:8), \"choice1_repeated_flipped\")  df_D <- exampleData1 |> filter(party_1 == \"Democrat\") |> reshape_projoint(outcomes) df_R <- exampleData1 |> filter(party_1 == \"Republican\") |> reshape_projoint(outcomes) df_0 <- exampleData1 |> filter(party_1 %in% c(\"Something else\", \"Independent\")) |> reshape_projoint(outcomes)  qoi <- set_qoi(   .structure = \"choice_level\",   .estimand = \"mm\",   .att_choose = \"att2\",   .lev_choose = \"level3\",   .att_notchoose = \"att2\",   .lev_notchoose = \"level1\" )  out_D <- projoint(df_D, qoi) out_R <- projoint(df_R, qoi) out_0 <- projoint(df_0, qoi)  out_merged <- bind_rows(   out_D$estimates |> mutate(party = \"Democrat\"),   out_R$estimates |> mutate(party = \"Republican\"),   out_0$estimates |> mutate(party = \"Independent\") ) |> filter(estimand == \"mm_corrected\")  # Plot  ggplot(out_merged, aes(y = party, x = estimate)) +   geom_vline(xintercept = 0.5, linetype = \"dashed\", color = \"gray\") +   geom_pointrange(aes(xmin = conf.low, xmax = conf.high)) +   geom_text(aes(label = format(round(estimate, 2), nsmall = 2)), vjust = -1) +   labs(y = NULL, x = \"Choice-level Marginal Mean\",        title = \"Preference for Democratic-majority areas\") +   theme_classic()"},{"path":"https://yhoriuchi.github.io/projoint/articles/faq.html","id":"what-is-the-history-of-conjoint-analysis-what-is-the-difference-between-profile-level-and-choice-level-data","dir":"Articles","previous_headings":"","what":"What is the history of conjoint analysis? What is the difference between ‚Äúprofile-level‚Äù and ‚Äúchoice-level‚Äù data?","title":"FAQ Page","text":"respondent given two different profiles (e.g., product) asked rate profiles. meant rating thought observation. Thus, researchers allowed ‚Äústack‚Äù data vertically, one profile-per-row (.e., ‚Äúprofile-level data‚Äù). However, respondents asked make choice two profiles, profiles longer independent; choosing one necessarily meant choosing . researchers often still stack data profile-level, case. Instead, use choice-level data, whereby choice consisting two profiles recorded single observation. See choice-level analysis article information profile-level vs.¬†choice-level structure.","code":""},{"path":"https://yhoriuchi.github.io/projoint/articles/faq.html","id":"what-if-i-have-profile-level-data","dir":"Articles","previous_headings":"","what":"What if I have profile-level data?","title":"FAQ Page","text":"Use .by_var comparing profile-level MMs two groups (e.g., Democrats vs.¬†Republicans).","code":"mm0 <- projoint(out1, .structure = \"profile_level\", .estimand = \"mm\") print(mm0) ##  ## Projoint results object ## ------------------------- ## Estimand:  mm  ## Structure:  profile_level  ## Standard error method:  analytical  ## IRR:  Estimated  ## Tau:  0.172  ## Number of estimates:  48 summary(mm0) ##  ## Summary of Projoint Estimates ## ------------------------------ ## Estimand: mm ## Structure: profile_level ## Standard error method: analytical ## SE type (lm_robust):   CR2 (clustered by id) ## IRR: Estimated ## Tau: 0.172 ## # A tibble: 48 √ó 6 ##    estimand       estimate     se conf.low conf.high att_level_choose ##    <chr>             <dbl>  <dbl>    <dbl>     <dbl> <chr>            ##  1 mm_uncorrected    0.574 0.0142    0.546     0.602 att1:level1      ##  2 mm_corrected      0.614 0.0219    0.571     0.657 att1:level1      ##  3 mm_uncorrected    0.485 0.0136    0.458     0.511 att1:level2      ##  4 mm_corrected      0.477 0.0207    0.436     0.517 att1:level2      ##  5 mm_uncorrected    0.445 0.0142    0.417     0.472 att1:level3      ##  6 mm_corrected      0.416 0.0219    0.372     0.459 att1:level3      ##  7 mm_uncorrected    0.489 0.0150    0.459     0.518 att2:level1      ##  8 mm_corrected      0.483 0.0229    0.438     0.528 att2:level1      ##  9 mm_uncorrected    0.524 0.0133    0.497     0.550 att2:level2      ## 10 mm_corrected      0.536 0.0203    0.496     0.576 att2:level2      ## # ‚Ñπ 38 more rows qoi_1 <- set_qoi(   .structure = \"profile_level\",   .estimand = \"mm\",   .att_choose = \"att1\",   .lev_choose = \"level1\" )  mm1 <- projoint(out1, .qoi = qoi_1) print(mm1) ##  ## Projoint results object ## ------------------------- ## Estimand:  mm  ## Structure:  profile_level  ## Standard error method:  analytical  ## IRR:  Estimated  ## Tau:  0.172  ## Number of estimates:  2 summary(mm1) ##  ## Summary of Projoint Estimates ## ------------------------------ ## Estimand: mm ## Structure: profile_level ## Standard error method: analytical ## SE type (lm_robust):   CR2 (clustered by id) ## IRR: Estimated ## Tau: 0.172 ## # A tibble: 2 √ó 7 ##   estimand       estimate     se conf.low conf.high att_level_choose ##   <chr>             <dbl>  <dbl>    <dbl>     <dbl> <chr>            ## 1 mm_uncorrected    0.574 0.0142    0.546     0.602 att1:level1      ## 2 mm_corrected      0.614 0.0219    0.571     0.657 att1:level1      ## # ‚Ñπ 1 more variable: att_level_notchoose <chr> mm1b <- projoint(out1, .qoi = qoi_1, .irr = 0.75) print(mm1b) ##  ## Projoint results object ## ------------------------- ## Estimand:  mm  ## Structure:  profile_level  ## Standard error method:  analytical  ## IRR:  Assumed (0.75)  ## Tau:  0.146  ## Number of estimates:  2 summary(mm1b) ##  ## Summary of Projoint Estimates ## ------------------------------ ## Estimand: mm ## Structure: profile_level ## Standard error method: analytical ## SE type (lm_robust):   CR2 (clustered by id) ## IRR: Assumed (0.75) ## Tau: 0.146 ## # A tibble: 2 √ó 7 ##   estimand       estimate     se conf.low conf.high att_level_choose ##   <chr>             <dbl>  <dbl>    <dbl>     <dbl> <chr>            ## 1 mm_uncorrected    0.574 0.0142    0.546     0.602 att1:level1      ## 2 mm_corrected      0.605 0.0201    0.566     0.645 att1:level1      ## # ‚Ñπ 1 more variable: att_level_notchoose <chr> amce0 <- projoint(out1, .structure = \"profile_level\", .estimand = \"amce\") ## Warning in pj_estimate(.data = .data, .structure = structure, .estimand = ## estimand, : AMCE analytical SEs: CR2 produced non-PSD/NA variances; fell back ## to se_type='stata' (then HC1 if needed). print(amce0) ##  ## Projoint results object ## ------------------------- ## Estimand:  amce  ## Structure:  profile_level  ## Standard error method:  analytical  ## IRR:  Estimated  ## Tau:  0.172  ## Number of estimates:  34 summary(amce0) ##  ## Summary of Projoint Estimates ## ------------------------------ ## Estimand: amce ## Structure: profile_level ## Standard error method: analytical ## SE type (lm_robust):   CR2 (clustered by id) ## IRR: Estimated ## Tau: 0.172 ## # A tibble: 34 √ó 7 ##    estimand         estimate     se conf.low conf.high att_level_choose ##    <chr>               <dbl>  <dbl>    <dbl>     <dbl> <chr>            ##  1 amce_uncorrected -0.0899  0.0236  -0.136    -0.0435 att1:level2      ##  2 amce_corrected   -0.137   0.0360  -0.208    -0.0662 att1:level2      ##  3 amce_uncorrected -0.130   0.0250  -0.179    -0.0808 att1:level3      ##  4 amce_corrected   -0.198   0.0386  -0.274    -0.122  att1:level3      ##  5 amce_uncorrected  0.0348  0.0244  -0.0132    0.0828 att2:level2      ##  6 amce_corrected    0.0530  0.0372  -0.0202    0.126  att2:level2      ##  7 amce_uncorrected -0.00177 0.0263  -0.0536    0.0500 att2:level3      ##  8 amce_corrected   -0.00270 0.0402  -0.0817    0.0763 att2:level3      ##  9 amce_uncorrected  0.0240  0.0233  -0.0218    0.0699 att3:level2      ## 10 amce_corrected    0.0366  0.0357  -0.0336    0.107  att3:level2      ## # ‚Ñπ 24 more rows ## # ‚Ñπ 1 more variable: att_level_choose_baseline <chr> qoi_3 <- set_qoi(   .structure = \"profile_level\",   .estimand = \"amce\",   .att_choose = \"att1\",   .lev_choose = \"level3\",   .att_choose_b = \"att1\",   .lev_choose_b = \"level1\" )  amce1 <- projoint(out1, .qoi = qoi_3) print(amce1) ##  ## Projoint results object ## ------------------------- ## Estimand:  amce  ## Structure:  profile_level  ## Standard error method:  analytical  ## IRR:  Estimated  ## Tau:  0.172  ## Number of estimates:  2 summary(amce1) ##  ## Summary of Projoint Estimates ## ------------------------------ ## Estimand: amce ## Structure: profile_level ## Standard error method: analytical ## SE type (lm_robust):   CR2 (clustered by id) ## IRR: Estimated ## Tau: 0.172 ## # A tibble: 2 √ó 9 ##   estimand         estimate     se conf.low conf.high att_level_choose ##   <chr>               <dbl>  <dbl>    <dbl>     <dbl> <chr>            ## 1 amce_uncorrected   -0.130 0.0250   -0.179   -0.0808 att1:level3      ## 2 amce_corrected     -0.198 0.0386   -0.274   -0.122  att1:level3      ## # ‚Ñπ 3 more variables: att_level_notchoose <chr>, ## #   att_level_choose_baseline <chr>, att_level_notchoose_baseline <chr> amce1b <- projoint(out1, .qoi = qoi_3, .irr = 0.75) print(amce1b) ##  ## Projoint results object ## ------------------------- ## Estimand:  amce  ## Structure:  profile_level  ## Standard error method:  analytical  ## IRR:  Assumed (0.75)  ## Tau:  0.146  ## Number of estimates:  2 summary(amce1b) ##  ## Summary of Projoint Estimates ## ------------------------------ ## Estimand: amce ## Structure: profile_level ## Standard error method: analytical ## SE type (lm_robust):   CR2 (clustered by id) ## IRR: Assumed (0.75) ## Tau: 0.146 ## # A tibble: 2 √ó 9 ##   estimand         estimate     se conf.low conf.high att_level_choose ##   <chr>               <dbl>  <dbl>    <dbl>     <dbl> <chr>            ## 1 amce_uncorrected   -0.130 0.0250   -0.179   -0.0808 att1:level3      ## 2 amce_corrected     -0.184 0.0353   -0.253   -0.114  att1:level3      ## # ‚Ñπ 3 more variables: att_level_notchoose <chr>, ## #   att_level_choose_baseline <chr>, att_level_notchoose_baseline <chr>"},{"path":"https://yhoriuchi.github.io/projoint/articles/faq.html","id":"profile-level-mms-and-amces","dir":"Articles","previous_headings":"What if I have profile-level data?","what":"üìà Profile-Level MMs and AMCEs","title":"FAQ Page","text":"Marginal Means  AMCEs","code":"data(\"out1_arranged\") mm   <- projoint(out1_arranged, .structure = \"profile_level\")  amce <- projoint(out1_arranged, .structure = \"profile_level\", .estimand = \"amce\") ## Warning in pj_estimate(.data = .data, .structure = structure, .estimand = ## estimand, : AMCE analytical SEs: CR2 produced non-PSD/NA variances; fell back ## to se_type='stata' (then HC1 if needed). plot(mm) plot(amce) outcomes <- c(paste0(\"choice\", 1:8), \"choice1_repeated_flipped\")  df <- exampleData1 |> mutate(white = ifelse(race == \"White\", 1, 0))  df_0 <- df |> filter(white == 0) |> reshape_projoint(outcomes) df_1 <- df |> filter(white == 1) |> reshape_projoint(outcomes) df_d <- df |> reshape_projoint(outcomes, .covariates = \"white\")  data_file <- system.file(\"extdata\", \"labels_arranged.csv\", package = \"projoint\") if (data_file == \"\") stop(\"File not found!\")  df_0 <- read_labels(df_0, data_file) df_1 <- read_labels(df_1, data_file) df_d <- read_labels(df_d, data_file)  out_0 <- projoint(df_0, .structure = \"profile_level\") out_1 <- projoint(df_1, .structure = \"profile_level\") out_d <- projoint(df_d, .structure = \"profile_level\", .by_var = \"white\")  plot_0 <- plot(out_0) plot_1 <- plot(out_1) plot_d <- plot(out_d, .by_var = TRUE)  plot_0 +   coord_cartesian(xlim = c(0.2, 0.8)) +   labs(title = \"Non-white\", x = \"AMCE\") +   theme(plot.title = element_text(hjust = 0.5)) +  plot_1 +   coord_cartesian(xlim = c(0.2, 0.8)) +   labs(title = \"White\", x = \"AMCE\") +   theme(axis.text.y = element_blank(), plot.title = element_text(hjust = 0.5)) +  plot_d +   coord_cartesian(xlim = c(-0.4, 0.4)) +   labs(title = \"Difference\", x = \"Difference\") +   theme(axis.text.y = element_blank(), plot.title = element_text(hjust = 0.5))"},{"path":[]},{"path":"https://yhoriuchi.github.io/projoint/articles/faq.html","id":"generate-a-javascript-or-php-randomizer","dir":"Articles","previous_headings":"How did researchers design conjoint surveys previously?","what":"1. Generate a JavaScript or PHP randomizer","title":"FAQ Page","text":"Many researchers use Anton Strezhnev‚Äôs Conjoint Survey Design Tool (Link: conjointSDT) produce JavaScript PHP randomizer.","code":""},{"path":"https://yhoriuchi.github.io/projoint/articles/faq.html","id":"javascript","dir":"Articles","previous_headings":"How did researchers design conjoint surveys previously? > 1. Generate a JavaScript or PHP randomizer","what":"JavaScript","title":"FAQ Page","text":"JavaScript randomizer can inserted first screen Qualtrics survey using Edit Question JavaScript. Example screenshot:  Example JavaScript: Download JavaScript runs internally within Qualtrics generates embedded fields conjoint task. example: \"K-1-1-7\" = value 7th attribute, first profile, first task \"K-5-2-5\" = value 5th attribute, second profile, fifth task","code":""},{"path":"https://yhoriuchi.github.io/projoint/articles/faq.html","id":"php","dir":"Articles","previous_headings":"How did researchers design conjoint surveys previously? > 1. Generate a JavaScript or PHP randomizer","what":"PHP","title":"FAQ Page","text":"Alternatively, PHP randomizer must hosted externally. Example hosted server:https://www.horiuchi.org/php/ACHR_Modified_2.php (PHP file ) method used :Agadjanian, Carey, Horiuchi, Ryan (2023)","code":""},{"path":"https://yhoriuchi.github.io/projoint/articles/faq.html","id":"modify-your-javascript-or-php-randomizer","dir":"Articles","previous_headings":"How did researchers design conjoint surveys previously?","what":"2. Modify your JavaScript or PHP randomizer","title":"FAQ Page","text":"may want add constraints ‚Äî example, prevent ties profiles. , can manually modify JavaScript PHP. future, projoint offer easier ways add constraints! , resources like OpenAI‚Äôs GPT-4 can help edit scripts. Example PHP snippet ensuring racial balance profiles: good examples manual constraints, please email Yusaku Horiuchi!","code":"$treat_profile_one = \"B-\" . (string)$p . \"-1-\" . (string)$treat_number; $treat_profile_two = \"B-\" . (string)$p . \"-2-\" . (string)$treat_number; $cond1 = $returnarray[$treat_profile_one] == \"White\" && $returnarray[$treat_profile_two] == $type; $cond2 = $returnarray[$treat_profile_two] == \"White\" && $returnarray[$treat_profile_one] == $type;  if ($cond1 or $cond2) {   $complete = True; }"},{"path":"https://yhoriuchi.github.io/projoint/articles/faq.html","id":"add-conjoint-tables-with-embedded-fields-in-qualtrics","dir":"Articles","previous_headings":"How did researchers design conjoint surveys previously?","what":"3. Add conjoint tables with embedded fields in Qualtrics","title":"FAQ Page","text":"generating randomizer, must create HTML tables displaying embedded fields task. Example first task:  Example HTML file: task_first.html conjoint study typically includes 5-10 tasks. embedded fields update across tasks: e.g., \"K-1...\" Task 1, \"K-2...\" Task 2, .","code":""},{"path":"https://yhoriuchi.github.io/projoint/articles/faq.html","id":"adding-a-repeated-task-recommended","dir":"Articles","previous_headings":"How did researchers design conjoint surveys previously? > 3. Add conjoint tables with embedded fields in Qualtrics","what":"Adding a repeated task (recommended!)","title":"FAQ Page","text":"‚Äôs easy create repeated task intra-respondent reliability (IRR) estimation: Copy HTML Task 1 later survey (e.g., Task 5) Flip Profile 1 Profile 2 (swap embedded field digits) Example repeated task:  Example HTML: task_repeated.html","code":""},{"path":"https://yhoriuchi.github.io/projoint/articles/faq.html","id":"sample-qualtrics-survey-template","dir":"Articles","previous_headings":"How did researchers design conjoint surveys previously?","what":"4. Sample Qualtrics survey template","title":"FAQ Page","text":"provide full Qualtrics QSF file ready use!  file recreates standard conjoint survey setup based Mummolo Nall (2017).","code":""},{"path":"https://yhoriuchi.github.io/projoint/articles/read.html","id":"read-your-data","dir":"Articles","previous_headings":"","what":"üì• Read Your Data","title":"Read and Wrangle Your Data","text":"can reshape analyze conjoint survey data, first need import R. projoint, use read_Qualtrics() function quickly read properly formatted Qualtrics files.","code":""},{"path":"https://yhoriuchi.github.io/projoint/articles/read.html","id":"read-workflow","dir":"Articles","previous_headings":"","what":"üöÄ Read Workflow","title":"Read and Wrangle Your Data","text":"exporting Qualtrics: Click ‚ÄúDownload Data‚Äù. Choose CSV format. Critically, select ‚ÄúUse choice text‚Äù rather coded values. ‚ö° skip selecting ‚ÄúUse choice text,‚Äù conjoint data may fail load properly! , using example bundled projoint:","code":"library(tidyverse) library(projoint) # Example: If your file is located in a \"data\" folder data <- read_Qualtrics(\"data/your_file.csv\") # Inspect the imported data: data ## # A tibble: 518 √ó 218 ##    StartDate           EndDate             Status     Progress ##    <dttm>              <dttm>              <chr>         <dbl> ##  1 2022-03-01 10:44:18 2022-03-01 10:44:43 IP Address      100 ##  2 2022-03-01 10:44:06 2022-03-01 10:47:59 IP Address      100 ##  3 2022-03-01 10:45:30 2022-03-01 10:49:03 IP Address      100 ##  4 2022-03-01 10:52:18 2022-03-01 10:56:29 IP Address      100 ##  5 2022-03-01 10:54:34 2022-03-01 10:57:30 IP Address      100 ##  6 2022-03-01 10:56:51 2022-03-01 10:58:06 IP Address      100 ##  7 2022-03-01 10:58:09 2022-03-01 11:00:45 IP Address      100 ##  8 2022-03-01 11:01:43 2022-03-01 11:01:51 IP Address      100 ##  9 2022-03-01 10:58:35 2022-03-01 11:03:44 IP Address      100 ## 10 2022-03-01 11:00:14 2022-03-01 11:04:37 IP Address      100 ## # ‚Ñπ 508 more rows ## # ‚Ñπ 214 more variables: `Duration (in seconds)` <dbl>, Finished <lgl>, ## #   RecordedDate <dttm>, ResponseId <chr>, DistributionChannel <chr>, ## #   UserLanguage <chr>, Q_RecaptchaScore <dbl>, Q1.2 <chr>, Q2.2 <chr>, ## #   Q2.3 <chr>, Q2.4 <chr>, Q2.5 <chr>, Q2.6 <chr>, Q2.7 <chr>, Q2.8 <chr>, ## #   Q2.9 <chr>, Q3.1 <chr>, Q4.2 <chr>, Q4.3 <chr>, Q4.4 <chr>, Q4.5 <chr>, ## #   Q4.6 <chr>, Q4.7 <chr>, Q4.8 <chr>, Q4.9 <chr>, Q5.1 <chr>, Q6.1 <chr>, ‚Ä¶"},{"path":"https://yhoriuchi.github.io/projoint/articles/read.html","id":"wrangle-your-data","dir":"Articles","previous_headings":"","what":"üõ†Ô∏è Wrangle Your Data","title":"Read and Wrangle Your Data","text":"Preparing data correctly one important steps conjoint analysis. Fortunately, reshape_projoint() function projoint makes easy.","code":""},{"path":"https://yhoriuchi.github.io/projoint/articles/read.html","id":"wrangle-workflow","dir":"Articles","previous_headings":"","what":"üöÄ Wrangle Workflow","title":"Read and Wrangle Your Data","text":"Outcome naming & order (important) List .outcomes order questions asked. repeated task, outcome must last element. base tasks (last), function reads digits name task id (e.g., \"choice4\", \"Q4\", \"task04\" ‚Üí task 4). repeated base task inferred first base outcome‚Äôs digits. repeated outcome need contain digits‚Äîposition (last) matters. Outcome strings end choice labels; default parse last character expect \"\"/\"B\". survey uses \"1\"/\"2\" (endings), set .choice_labels accordingly. -Flipped Repeated Task Repeated Task Use .fill = TRUE ‚Äúfill‚Äù missing values based IRR agreement. Compare: Tip: - Use .fill = TRUE small-sample subgroup analysis (helps increase power). - Use .fill = FALSE (default) doubt safer estimates. already clean dataset, use make_projoint_data(): Preview: reorder relabel attributes: Save labels: Edit CSV (change order, label columns; leave level_id untouched) Save ‚Äúlabels_arranged.csv‚Äù something else. Reload labels: Compare using example:   üè† Home: Home","code":"outcomes <- paste0(\"choice\", 1:8) outcomes2 <- c(outcomes, \"choice1_repeated_notflipped\") out2 <- reshape_projoint(   .dataframe = exampleData2,   .outcomes = outcomes2,   .repeated = TRUE,   .flipped = FALSE ) outcomes <- paste0(\"choice\", 1:8) out3 <- reshape_projoint(   .dataframe = exampleData3,   .outcomes = outcomes,   .repeated = FALSE ) fill_FALSE <- reshape_projoint(   .dataframe = exampleData1,   .outcomes = outcomes1,   .fill = FALSE )  fill_TRUE <- reshape_projoint(   .dataframe = exampleData1,   .outcomes = outcomes1,   .fill = TRUE ) selected_vars <- c(\"id\", \"task\", \"profile\", \"selected\", \"selected_repeated\", \"agree\") fill_FALSE$data[selected_vars] ## # A tibble: 6,400 √ó 6 ##    id                 task profile selected selected_repeated agree ##    <chr>             <dbl>   <dbl>    <dbl>             <dbl> <dbl> ##  1 R_00zYHdY1te1Qlrz     1       1        1                 1     1 ##  2 R_00zYHdY1te1Qlrz     1       2        0                 0     1 ##  3 R_00zYHdY1te1Qlrz     2       1        1                NA    NA ##  4 R_00zYHdY1te1Qlrz     2       2        0                NA    NA ##  5 R_00zYHdY1te1Qlrz     3       1        1                NA    NA ##  6 R_00zYHdY1te1Qlrz     3       2        0                NA    NA ##  7 R_00zYHdY1te1Qlrz     4       1        0                NA    NA ##  8 R_00zYHdY1te1Qlrz     4       2        1                NA    NA ##  9 R_00zYHdY1te1Qlrz     5       1        1                NA    NA ## 10 R_00zYHdY1te1Qlrz     5       2        0                NA    NA ## # ‚Ñπ 6,390 more rows fill_TRUE$data[selected_vars] ## # A tibble: 6,400 √ó 6 ##    id                 task profile selected selected_repeated agree ##    <chr>             <dbl>   <dbl>    <dbl>             <dbl> <dbl> ##  1 R_00zYHdY1te1Qlrz     1       1        1                 1     1 ##  2 R_00zYHdY1te1Qlrz     1       2        0                 0     1 ##  3 R_00zYHdY1te1Qlrz     2       1        1                NA     1 ##  4 R_00zYHdY1te1Qlrz     2       2        0                NA     1 ##  5 R_00zYHdY1te1Qlrz     3       1        1                NA     1 ##  6 R_00zYHdY1te1Qlrz     3       2        0                NA     1 ##  7 R_00zYHdY1te1Qlrz     4       1        0                NA     1 ##  8 R_00zYHdY1te1Qlrz     4       2        1                NA     1 ##  9 R_00zYHdY1te1Qlrz     5       1        1                NA     1 ## 10 R_00zYHdY1te1Qlrz     5       2        0                NA     1 ## # ‚Ñπ 6,390 more rows out4 <- make_projoint_data(   .dataframe = exampleData1_labelled_tibble,   .attribute_vars = c(     \"School Quality\", \"Violent Crime Rate (Vs National Rate)\",     \"Racial Composition\", \"Housing Cost\",     \"Presidential Vote (2020)\", \"Total Daily Driving Time for Commuting and Errands\",     \"Type of Place\"   ),   .id_var = \"id\",   .task_var = \"task\",   .profile_var = \"profile\",   .selected_var = \"selected\",   .selected_repeated_var = \"selected_repeated\",   .fill = TRUE ) out4 ## <projoint_data> ## - data:     6400 rows, 13 columns ## - labels:   24 levels, 4 columns save_labels(out1, \"temp/labels_original.csv\") data(out1_arranged, package = \"projoint\") mm <- projoint(out1, .structure = \"profile_level\", .estimand = \"mm\") plot(mm) mm <- projoint(out1_arranged, .structure = \"profile_level\", .estimand = \"mm\") plot(mm)"},{"path":"https://yhoriuchi.github.io/projoint/articles/read.html","id":"example-flipped-repeated-task","dir":"Articles","previous_headings":"üöÄ Wrangle Workflow","what":"Example (Flipped Repeated Task)","title":"Read and Wrangle Your Data","text":"Key Arguments: .outcomes: Outcome columns (include repeated task last) .choice_labels: Profile labels (e.g., ‚Äú‚Äù, ‚ÄúB‚Äù) .idvar: Respondent ID variable .alphabet: Variable prefix (‚ÄúK‚Äù) .repeated, .flipped: repeated task exists flipped","code":"outcomes <- paste0(\"choice\", 1:8) outcomes1 <- c(outcomes, \"choice1_repeated_flipped\")  out1 <- reshape_projoint(   .dataframe = exampleData1,   .outcomes = outcomes1,   .choice_labels = c(\"A\", \"B\"),   .alphabet = \"K\",   .idvar = \"ResponseId\",   .repeated = TRUE,   .flipped = TRUE )"},{"path":"https://yhoriuchi.github.io/projoint/articles/structure.html","id":"why-choice-level-analysis-","dir":"Articles","previous_headings":"","what":"Why Choice-Level Analysis?.","title":"Choice-Level Analysis","text":"traditional conjoint analysis, researchers typically estimate profile-level quantities, treating profile independently ‚Äî approach became standard following influential work Hainmueller, Hopkins, Yamamoto (2014). method rests important assumption: profile independently generated. However, profile-level analysis can systematically miss people actually make decisions. Key Issues: Profile-level quantities like AMCEs, require assumption independently generated profiles disregard context comparison, prevent researchers investigating many questions (implicitly explicitly) assume dependence profiles. Examples choice-level research questions levels (white vs.¬†Asian, Black, Hispanic) always differ profiles. two profiles specifically designed based multiple attributes. sum two percentages 100. One profile always fixed, another varies across tasks. left-leaning (right-leaning) candidate‚Äôs policies (attributes) always positioned consistently left (right). individuals compare two profiles side--side (conjoint tasks), evaluations often psychologically influenced alternative (See Horiuchi Johnson 2025).","code":""},{"path":"https://yhoriuchi.github.io/projoint/articles/structure.html","id":"why-move-to-choice-level-analysis","dir":"Articles","previous_headings":"","what":"Why Move to Choice-Level Analysis?","title":"Choice-Level Analysis","text":"Choice-level analysis models decision two profiles, evaluation single profile. people make real-world tradeoffs (e.g., choosing candidates, products, policies) comparative contexts shape judgments (e.g., assimilation, contrast effects) Rather estimating probability selecting standalone profile, choice-level analysis estimates probability choosing one profile another, conditional attributes interest attributes. ‚úÖ Better matches real-world behavior ‚úÖ Explicitly captures comparative decision-making ‚úÖ Reveals true tradeoffs feature prioritization","code":""},{"path":[]},{"path":"https://yhoriuchi.github.io/projoint/articles/structure.html","id":"key-takeaway","dir":"Articles","previous_headings":"","what":"Key Takeaway","title":"Choice-Level Analysis","text":"üîé conjoint design presents two profiles comparison, choice-level analysis essential valid insightful inference. üìà provides deeper insights, accurate estimates, closer reflection actual decision-making.","code":""},{"path":"https://yhoriuchi.github.io/projoint/articles/structure.html","id":"references","dir":"Articles","previous_headings":"","what":"üìö References","title":"Choice-Level Analysis","text":"Clayton, Horiuchi, Kaufman, King, Komisarchik (Forthcoming). ‚ÄúCorrecting Measurement Error Bias Conjoint Survey Experiments.‚ÄùForthcoming, American Journal Political Science.Pre-Print Available Horiuchi Johnson (2025). ‚ÄúAdvancing Conjoint Analysis: Delving Profile Comparisons.‚ÄùWork--progress.","code":""},{"path":"https://yhoriuchi.github.io/projoint/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Yusaku Horiuchi. Author, maintainer. Aaron Kaufman. Author. Gary King. Author.","code":""},{"path":"https://yhoriuchi.github.io/projoint/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Clayton K, Horiuchi Y, Kaufman , King G, Komisarchik M (2025). ‚ÄúCorrecting Measurement Error Bias Conjoint Survey Experiments.‚Äù American Journal Political Science. Forthcoming, https://gking.harvard.edu/files/gking/files/conerr.pdf. Horiuchi Y, Kaufman , King G (2025). projoint: One Stop Conjoint Shop. R package version 1.0.5, https://yhoriuchi.github.io/projoint/.","code":"@Article{,   title = {Correcting Measurement Error Bias in Conjoint Survey Experiments},   author = {Katherine Clayton and Yusaku Horiuchi and Aaron R. Kaufman and Gary King and Mayya Komisarchik},   journal = {American Journal of Political Science},   year = {2025},   note = {Forthcoming},   url = {https://gking.harvard.edu/files/gking/files/conerr.pdf}, } @Manual{,   title = {projoint: The One Stop Conjoint Shop},   author = {Yusaku Horiuchi and Aaron R. Kaufman and Gary King},   year = {2025},   note = {R package version 1.0.5},   url = {https://yhoriuchi.github.io/projoint/}, }"},{"path":[]},{"path":"https://yhoriuchi.github.io/projoint/index.html","id":"id_-tutorials","dir":"","previous_headings":"","what":"üöÄ Tutorials","title":"Conjoint Analysis with Reliability Correction and Visualization","text":"Open R (install R ), run following command coding environment. Online surveys frequently written online software called Qualtrics. Using web tool, called Projoint Survey Designer, don‚Äôt need learn write survey Qualtrics. Use Projoint Survey Designer export surveys formatted Qualtrics. Follow step--step guide learn set Qualtrics survey. Log Qualtrics account. Click ‚ÄúCreate new project‚Äù ‚Äúscratch‚Äù select ‚ÄúSurvey‚Äù ‚ÄúGet started‚Äù Enter name ‚Äúwant start survey‚Äù select ‚ÄúImport QSF file‚Äù Click ‚ÄúChoose file‚Äù select .QSF file. Click ‚ÄúCreate project‚Äù free field Qualtrics survey online vendors. Click ‚ÄúDownload Data‚Äù. Choose CSV format. Critically, select ‚ÄúUse choice text‚Äù rather coded values. Load survey responses R: Prepare data analysis: Follow step--step guide learn read reshape data conjoint analysis. Estimate Marginal Means (MMs) Average Marginal Component Effects (AMCEs) correction measurement error: Note: following example illustrates profile_level analysis. approach common social science useful initial diagnostic, encourage researchers consider choice_level analysis (default .structure). See Choice-Level Analysis. Detailed steps analysis appear step--step guide. Visualize results easily: Estimate additional quantities interest explore subgroup comparisons using choice-level analysis. Estimate correct marginal means (MMs) average marginal component effects (AMCEs), including predicting IRR necessary. Visualize marginal means (MMs) average marginal component effects (AMCEs). Go beyond standard profile-level summaries. Directly compare trade-offs (e.g., low housing cost vs.¬†low crime). Collapse multiple levels (e.g., city vs.¬†suburban preferences). Estimate subgroup differences (e.g., Democrats vs.¬†Republicans). See detailed examples Explore Compare vignette.","code":"devtools::install_github(\"yhoriuchi/projoint\") library(projoint) dat <- read_Qualtrics(\"your_file.csv\") dat <- reshape_projoint(   .dataframe = dat,   .outcomes = c(paste0(\"choice\", 1:8), \"choice1_repeated_flipped\") ) output <- projoint(out1_arranged, .structure = \"profile_level\") print(output) summary(output) plot(output)"},{"path":"https://yhoriuchi.github.io/projoint/index.html","id":"id_-upcoming-features","dir":"","previous_headings":"","what":"üì¶ Upcoming Features","title":"Conjoint Analysis with Reliability Correction and Visualization","text":"Weighted estimation features respondents Support non-binary outcomes (ratings, rankings) ‚ú® Thank using projoint! ‚ú®","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/exampleData1.html","id":null,"dir":"Reference","previous_headings":"","what":"Projoint Example Data Set 1: Building Conjoint with a Repeated, Flipped Task ‚Äî exampleData1","title":"Projoint Example Data Set 1: Building Conjoint with a Repeated, Flipped Task ‚Äî exampleData1","text":"cleaned Qualtrics export conjoint study compares two potential new building developments. respondent completed 8 standard tasks well repeated version first task (flipped), can used calculate intra-respondent reliability (response instability).","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/exampleData1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Projoint Example Data Set 1: Building Conjoint with a Repeated, Flipped Task ‚Äî exampleData1","text":"","code":"data(exampleData1)"},{"path":"https://yhoriuchi.github.io/projoint/reference/exampleData1.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Projoint Example Data Set 1: Building Conjoint with a Repeated, Flipped Task ‚Äî exampleData1","text":"data frame 400 rows 185 columns. Contains survey responses   including demographic information, outcome choices, conjoint attribute   values identified K-*-* variable names.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/exampleData1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Projoint Example Data Set 1: Building Conjoint with a Repeated, Flipped Task ‚Äî exampleData1","text":"","code":"# Load the dataset data(exampleData1)  # Inspect the first few rows head(exampleData1) #> # A tibble: 6 √ó 185 #>   ResponseId      choice1_repeated_fli‚Ä¶¬π choice1 choice2 choice3 choice4 choice5 #>   <chr>           <chr>                  <chr>   <chr>   <chr>   <chr>   <chr>   #> 1 R_1M3TDihZzq9z‚Ä¶ Community B            Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ #> 2 R_3HtXzkcSSlfi‚Ä¶ Community B            Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ #> 3 R_yjYj0jtOY98X‚Ä¶ Community B            Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ #> 4 R_1dKd05O6FTOV‚Ä¶ Community B            Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ #> 5 R_1otDp642wWYl‚Ä¶ Community A            Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ #> 6 R_2BnD3fuJMRKZ‚Ä¶ Community A            Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ #> # ‚Ñπ abbreviated name: ¬π‚Äãchoice1_repeated_flipped #> # ‚Ñπ 178 more variables: choice6 <chr>, choice7 <chr>, choice8 <chr>, #> #   race <chr>, party_1 <chr>, party_2 <chr>, party_3 <chr>, party_4 <chr>, #> #   ideology <chr>, honesty <chr>, `K-1-1` <chr>, `K-1-1-1` <chr>, #> #   `K-1-2` <chr>, `K-1-1-2` <chr>, `K-1-3` <chr>, `K-1-1-3` <chr>, #> #   `K-1-4` <chr>, `K-1-1-4` <chr>, `K-1-5` <chr>, `K-1-1-5` <chr>, #> #   `K-1-6` <chr>, `K-1-1-6` <chr>, `K-1-7` <chr>, `K-1-1-7` <chr>, ‚Ä¶  # Number of rows and columns dim(exampleData1) #> [1] 400 185  # Display column names (truncated here) names(exampleData1)[1:10] #>  [1] \"ResponseId\"               \"choice1_repeated_flipped\" #>  [3] \"choice1\"                  \"choice2\"                  #>  [5] \"choice3\"                  \"choice4\"                  #>  [7] \"choice5\"                  \"choice6\"                  #>  [9] \"choice7\"                  \"choice8\""},{"path":"https://yhoriuchi.github.io/projoint/reference/exampleData1_labelled_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Projoint Example Data Set 1: ","title":"Projoint Example Data Set 1: ","text":"cleaned tibble attribute corresponds separate column descriptive attribute name. unit observation two profiles task respondent.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/exampleData1_labelled_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Projoint Example Data Set 1: ","text":"","code":"data(exampleData1_labelled_tibble)"},{"path":"https://yhoriuchi.github.io/projoint/reference/exampleData1_labelled_tibble.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Projoint Example Data Set 1: ","text":"tibble 6,400 rows 14 columns. Contains survey responses   including outcome choices conjoint attribute values (columns typically   named `K-*-*` convention).","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/exampleData1_labelled_tibble.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Projoint Example Data Set 1: ","text":"Qualtrics survey Prolific; see Clayton et al. replication materials.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/exampleData1_labelled_tibble.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Projoint Example Data Set 1: ","text":"dataset intended illustrating reading, reshaping,   analysis workflows projoint. Column names compatible   reshape_projoint().","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/exampleData1_labelled_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Projoint Example Data Set 1: ","text":"","code":"# Load the data data(exampleData1_labelled_tibble)  # Basic inspection (fast and always runnable) head(exampleData1_labelled_tibble) #> # A tibble: 6 √ó 14 #>   id                 task profile selected selected_repeated `School Quality` #>   <chr>             <dbl>   <dbl>    <dbl>             <dbl> <chr>            #> 1 R_00zYHdY1te1Qlrz     1       1        1                 1 9 out of 10      #> 2 R_00zYHdY1te1Qlrz     1       2        0                 0 5 out of 10      #> 3 R_00zYHdY1te1Qlrz     2       1        1                NA 9 out of 10      #> 4 R_00zYHdY1te1Qlrz     2       2        0                NA 9 out of 10      #> 5 R_00zYHdY1te1Qlrz     3       1        1                NA 5 out of 10      #> 6 R_00zYHdY1te1Qlrz     3       2        0                NA 9 out of 10      #> # ‚Ñπ 8 more variables: `Violent Crime Rate (Vs National Rate)` <chr>, #> #   `Racial Composition` <chr>, `Housing Cost` <chr>, #> #   `Presidential Vote (2020)` <chr>, #> #   `Total Daily Driving Time for Commuting and Errands` <chr>, #> #   `Type of Place` <chr>, race <fct>, ideology <fct> dim(exampleData1_labelled_tibble) #> [1] 6400   14  # Optional: quick structure peek (names only) names(exampleData1_labelled_tibble) #>  [1] \"id\"                                                 #>  [2] \"task\"                                               #>  [3] \"profile\"                                            #>  [4] \"selected\"                                           #>  [5] \"selected_repeated\"                                  #>  [6] \"School Quality\"                                     #>  [7] \"Violent Crime Rate (Vs National Rate)\"              #>  [8] \"Racial Composition\"                                 #>  [9] \"Housing Cost\"                                       #> [10] \"Presidential Vote (2020)\"                           #> [11] \"Total Daily Driving Time for Commuting and Errands\" #> [12] \"Type of Place\"                                      #> [13] \"race\"                                               #> [14] \"ideology\""},{"path":"https://yhoriuchi.github.io/projoint/reference/exampleData2.html","id":null,"dir":"Reference","previous_headings":"","what":"Projoint Example Data Set 2: Building Conjoint with a Repeated, Non-Flipped Task ‚Äî exampleData2","title":"Projoint Example Data Set 2: Building Conjoint with a Repeated, Non-Flipped Task ‚Äî exampleData2","text":"cleaned Qualtrics export conjoint study compares two potential new building developments. respondent completed 8 standard tasks well repeated version first task, profiles presented left-right positions (flipped).","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/exampleData2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Projoint Example Data Set 2: Building Conjoint with a Repeated, Non-Flipped Task ‚Äî exampleData2","text":"","code":"data(exampleData2)"},{"path":"https://yhoriuchi.github.io/projoint/reference/exampleData2.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Projoint Example Data Set 2: Building Conjoint with a Repeated, Non-Flipped Task ‚Äî exampleData2","text":"data frame 400 rows 185 columns. Contains survey responses   including demographic information, outcome choices, conjoint attribute   values identified K-*-* variable names.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/exampleData2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Projoint Example Data Set 2: Building Conjoint with a Repeated, Non-Flipped Task ‚Äî exampleData2","text":"","code":"# Load the dataset data(exampleData2)  # Inspect the first few rows head(exampleData2) #> # A tibble: 6 √ó 185 #>   ResponseId      choice1_repeated_not‚Ä¶¬π choice1 choice2 choice3 choice4 choice5 #>   <chr>           <chr>                  <chr>   <chr>   <chr>   <chr>   <chr>   #> 1 R_1M3TDihZzq9z‚Ä¶ Community A            Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ #> 2 R_3HtXzkcSSlfi‚Ä¶ Community A            Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ #> 3 R_yjYj0jtOY98X‚Ä¶ Community A            Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ #> 4 R_1dKd05O6FTOV‚Ä¶ Community A            Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ #> 5 R_1otDp642wWYl‚Ä¶ Community B            Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ #> 6 R_2BnD3fuJMRKZ‚Ä¶ Community B            Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ #> # ‚Ñπ abbreviated name: ¬π‚Äãchoice1_repeated_notflipped #> # ‚Ñπ 178 more variables: choice6 <chr>, choice7 <chr>, choice8 <chr>, #> #   race <chr>, party_1 <chr>, party_2 <chr>, party_3 <chr>, party_4 <chr>, #> #   ideology <chr>, honesty <chr>, `K-1-1` <chr>, `K-1-1-1` <chr>, #> #   `K-1-2` <chr>, `K-1-1-2` <chr>, `K-1-3` <chr>, `K-1-1-3` <chr>, #> #   `K-1-4` <chr>, `K-1-1-4` <chr>, `K-1-5` <chr>, `K-1-1-5` <chr>, #> #   `K-1-6` <chr>, `K-1-1-6` <chr>, `K-1-7` <chr>, `K-1-1-7` <chr>, ‚Ä¶  # Number of rows and columns dim(exampleData2) #> [1] 400 185  # Display first 10 column names names(exampleData2)[1:10] #>  [1] \"ResponseId\"                  \"choice1_repeated_notflipped\" #>  [3] \"choice1\"                     \"choice2\"                     #>  [5] \"choice3\"                     \"choice4\"                     #>  [7] \"choice5\"                     \"choice6\"                     #>  [9] \"choice7\"                     \"choice8\""},{"path":"https://yhoriuchi.github.io/projoint/reference/exampleData3.html","id":null,"dir":"Reference","previous_headings":"","what":"Projoint Example Data Set 3: Building Conjoint with No Repeated Task ‚Äî exampleData3","title":"Projoint Example Data Set 3: Building Conjoint with No Repeated Task ‚Äî exampleData3","text":"cleaned Qualtrics export conjoint study compares two potential new building developments. respondent completed 8 standard tasks ; repeated tasks included dataset.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/exampleData3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Projoint Example Data Set 3: Building Conjoint with No Repeated Task ‚Äî exampleData3","text":"","code":"data(exampleData3)"},{"path":"https://yhoriuchi.github.io/projoint/reference/exampleData3.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Projoint Example Data Set 3: Building Conjoint with No Repeated Task ‚Äî exampleData3","text":"data frame 400 rows 184 columns. Contains survey responses   including demographic information, outcome choices, conjoint attribute   values identified K-*-* variable names.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/exampleData3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Projoint Example Data Set 3: Building Conjoint with No Repeated Task ‚Äî exampleData3","text":"","code":"# Load the dataset data(exampleData3)  # Inspect the first few rows head(exampleData3) #> # A tibble: 6 √ó 184 #>   ResponseId     choice1 choice2 choice3 choice4 choice5 choice6 choice7 choice8 #>   <chr>          <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   #> 1 R_1M3TDihZzq9‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ #> 2 R_3HtXzkcSSlf‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ #> 3 R_yjYj0jtOY98‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ #> 4 R_1dKd05O6FTO‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ #> 5 R_1otDp642wWY‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ #> 6 R_2BnD3fuJMRK‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ Commun‚Ä¶ #> # ‚Ñπ 175 more variables: race <chr>, party_1 <chr>, party_2 <chr>, #> #   party_3 <chr>, party_4 <chr>, ideology <chr>, honesty <chr>, `K-1-1` <chr>, #> #   `K-1-1-1` <chr>, `K-1-2` <chr>, `K-1-1-2` <chr>, `K-1-3` <chr>, #> #   `K-1-1-3` <chr>, `K-1-4` <chr>, `K-1-1-4` <chr>, `K-1-5` <chr>, #> #   `K-1-1-5` <chr>, `K-1-6` <chr>, `K-1-1-6` <chr>, `K-1-7` <chr>, #> #   `K-1-1-7` <chr>, `K-1-2-1` <chr>, `K-1-2-2` <chr>, `K-1-2-3` <chr>, #> #   `K-1-2-4` <chr>, `K-1-2-5` <chr>, `K-1-2-6` <chr>, `K-1-2-7` <chr>, ‚Ä¶  # Number of rows and columns dim(exampleData3) #> [1] 400 184  # Display first 10 column names names(exampleData3)[1:10] #>  [1] \"ResponseId\" \"choice1\"    \"choice2\"    \"choice3\"    \"choice4\"    #>  [6] \"choice5\"    \"choice6\"    \"choice7\"    \"choice8\"    \"race\""},{"path":"https://yhoriuchi.github.io/projoint/reference/make_projoint_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a projoint_data object from a labelled tibble ‚Äî make_projoint_data","title":"Make a projoint_data object from a labelled tibble ‚Äî make_projoint_data","text":"Converts labelled tibble/data frame (one column per attribute) object class projoint_data downstream functions (e.g., projoint) can consume. unit observation two profiles task respondent.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/make_projoint_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a projoint_data object from a labelled tibble ‚Äî make_projoint_data","text":"","code":"make_projoint_data(   .dataframe,   .attribute_vars,   .id_var = \"id\",   .task_var = \"task\",   .profile_var = \"profile\",   .selected_var = \"selected\",   .selected_repeated_var = NULL,   .fill = FALSE )"},{"path":"https://yhoriuchi.github.io/projoint/reference/make_projoint_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a projoint_data object from a labelled tibble ‚Äî make_projoint_data","text":".dataframe data frame (tibble). One row per profile per task per respondent. .attribute_vars Character vector attribute column names. .id_var Column name (character) respondent IDs. Default \"id\". .task_var Column name (character) task numbers. Default \"task\". .profile_var Column name (character) profile numbers. Default \"profile\". .selected_var Column name (character) binary choice task (values {0,1}). Default \"selected\". .selected_repeated_var Optional column name (character) binary choice repeated task. Default NULL. .fill Logical. TRUE, uses repeated-task agreement fill missing agreement values non-repeated tasks (assumes IRR independent table content). unsure, prefer default FALSE.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/make_projoint_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a projoint_data object from a labelled tibble ‚Äî make_projoint_data","text":"projoint_data object (list-like object containing labels   tibble data tibble) ready pass projoint related   functions.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/make_projoint_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a projoint_data object from a labelled tibble ‚Äî make_projoint_data","text":"","code":"# \\donttest{ # Example: build a projoint_data object from the labelled-tibble example data(exampleData1_labelled_tibble)  att_cols <- c(\"School Quality\", \"Violent Crime Rate (Vs National Rate)\",               \"Racial Composition\", \"Housing Cost\",               \"Presidential Vote (2020)\",                \"Total Daily Driving Time for Commuting and Errands\",               \"Type of Place\")  pj_dat <- make_projoint_data(   .dataframe             = exampleData1_labelled_tibble,   .attribute_vars        = att_cols,   .id_var                = \"id\",   .task_var              = \"task\",   .profile_var           = \"profile\",   .selected_var          = \"selected\",   .selected_repeated_var = \"selected_repeated\",   .fill                  = FALSE )  class(pj_dat) #> [1] \"projoint_data\" # [1] \"projoint_data\" # }"},{"path":"https://yhoriuchi.github.io/projoint/reference/organize_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Organize data for estimation (internal helper) ‚Äî organize_data","title":"Organize data for estimation (internal helper) ‚Äî organize_data","text":"Prepares tidy inputs MM/AMCE estimation IRR handling. Called inside pj_estimate() reshaping respondent‚Äìtask‚Äìprofile.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/organize_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Organize data for estimation (internal helper) ‚Äî organize_data","text":"","code":"organize_data(   .dataframe,   .structure,   .estimand,   .remove_ties,   .att_choose,   .lev_choose,   .att_notchoose,   .lev_notchoose )"},{"path":"https://yhoriuchi.github.io/projoint/reference/organize_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Organize data for estimation (internal helper) ‚Äî organize_data","text":".dataframe tibble/data frame reshape_projoint(), containing columns like id, task, profile, selected, agree (repeated), attribute columns named att1, att2, ... store level_ids (e.g., \"att1:level2\"). .structure Either \"profile_level\" \"choice_level\". .estimand Either \"mm\" \"amce\". .remove_ties Logical; TRUE (default) remove tied responses profile-level setups (keeps tasks exactly one profile selected). .att_choose Attribute ID ‚Äúchosen‚Äù side (e.g., \"att3\"). .lev_choose Level ID(s) chosen side (e.g., \"level2\" profile-level; vector level IDs choice-level). .att_notchoose Attribute ID ‚Äúchosen‚Äù side (choice-level ). .lev_notchoose Level ID(s) -chosen side (choice-level ).","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/organize_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Organize data for estimation (internal helper) ‚Äî organize_data","text":"named list two tibbles: $data_for_estimand: rows restricted reshaped         requested estimand/QOI. profile-level, one row per respondent‚Äìtask‚Äìprofile         target level present (ties optionally removed). choice-level,         one row per respondent‚Äìtask paired information profiles 1 2,         restricted requested attribute-level pair(s). $data_for_irr: one row per respondent columns id,         agree (available), detected weight/cluster hints         (columns matching \"my_weight|my_cluster|^weights?$|^clusters?$\").","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/out1_arranged.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Output: Manually Rearranged Labels ‚Äî out1_arranged","title":"Example Output: Manually Rearranged Labels ‚Äî out1_arranged","text":"toy projoint_data object showing happens labels manually rearranged (e.g., via save_labels / read_labels).","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/out1_arranged.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Output: Manually Rearranged Labels ‚Äî out1_arranged","text":"","code":"data(out1_arranged)"},{"path":"https://yhoriuchi.github.io/projoint/reference/out1_arranged.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Output: Manually Rearranged Labels ‚Äî out1_arranged","text":"object class projoint_data.   Contains two elements: $labels: reordered attribute‚Äìlevel mapping $data: corresponding profile-level dataset","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/out1_arranged.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example Output: Manually Rearranged Labels ‚Äî out1_arranged","text":"Useful illustrating workflows without requiring users re-run reordering .","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/pj_estimate.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal Estimation Function ‚Äî pj_estimate","title":"Internal Estimation Function ‚Äî pj_estimate","text":"Core workhorse computing marginal means (MMs) AMCEs conjoint design, optional intra-respondent reliability (IRR) correction.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/pj_estimate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal Estimation Function ‚Äî pj_estimate","text":"","code":"pj_estimate(   .data,   .structure,   .estimand,   .att_choose,   .lev_choose,   .att_notchoose,   .lev_notchoose,   .att_choose_b,   .lev_choose_b,   .att_notchoose_b,   .lev_notchoose_b,   .se_method,   .irr,   .remove_ties,   .ignore_position,   .n_sims,   .n_boot,   .weights_1,   .clusters_1,   .se_type_1,   .weights_2,   .clusters_2,   .se_type_2,   .auto_cluster = TRUE,   .seed = NULL )"},{"path":"https://yhoriuchi.github.io/projoint/reference/pj_estimate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal Estimation Function ‚Äî pj_estimate","text":".data projoint_data object created reshape_projoint make_projoint_data. .structure Either \"profile_level\" \"choice_level\". .estimand Either \"mm\" (marginal mean) \"amce\" (average marginal component effect). .att_choose Attribute chosen profile/feature. .lev_choose Level(s) chosen profile/feature. Length 1 profile_level; may 1+ choice_level. .att_notchoose Attribute -chosen profile/feature (required choice_level). .lev_notchoose Level(s) -chosen profile/feature (required choice_level). .att_choose_b (AMCE ) Baseline attribute comparison. .lev_choose_b (AMCE ) Baseline level(s) comparison. .att_notchoose_b (AMCE , choice-level ) Baseline attribute -chosen profile. .lev_notchoose_b (AMCE , choice-level ) Baseline level(s) -chosen profile. .se_method One \"analytical\", \"simulation\", \"bootstrap\". .irr NULL (default) estimate IRR repeated tasks; otherwise numeric IRR value. .remove_ties Logical; ties removed estimation? Defaults TRUE. .ignore_position Logical; choice_level. TRUE (default), ignore profile position (left/right). .n_sims Integer; required .se_method == \"simulation\". .n_boot Integer; required .se_method == \"bootstrap\". .weights_1 (Optional) Bare (unquoted) column weights IRR estimation; passed lm_robust. .clusters_1 (Optional) Bare (unquoted) column clusters IRR estimation; passed lm_robust. .se_type_1 SE type IRR estimation; passed lm_robust. NULL, estimatr defaults used (HC2 unclustered; CR2 clustered). .weights_2 (Optional) Bare (unquoted) column weights MM/AMCE estimation; passed lm_robust. .clusters_2 (Optional) Bare (unquoted) column clusters MM/AMCE estimation; passed lm_robust. .se_type_2 SE type MM/AMCE estimation; passed lm_robust. NULL, estimatr defaults used (HC2 unclustered; CR2 clustered). .auto_cluster Logical; TRUE (default), auto-cluster id present .clusters_* supplied; auto-clustering occurs corresponding .se_type_* NULL. See projoint. .seed Optional integer. supplied, sets temporary RNG seed reproducible simulation/bootstrap inside call restores previous RNG state exit.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/pj_estimate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal Estimation Function ‚Äî pj_estimate","text":"data frame rows requested estimand(s) columns: estimand: one \"mm_uncorrected\", \"mm_corrected\",           \"amce_uncorrected\", \"amce_corrected\". estimate, se, conf.low, conf.high, tau.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/pj_estimate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Internal Estimation Function ‚Äî pj_estimate","text":"IRR clipped [0.5, 1) (tiny epsilon) avoid boundary issues. choice-level MMs, ties must removed (.remove_ties = TRUE). .seed supplied, previous RNG state restored exit.","code":""},{"path":[]},{"path":"https://yhoriuchi.github.io/projoint/reference/plot.projoint_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot method for projoint_results ‚Äî plot.projoint_results","title":"Plot method for projoint_results ‚Äî plot.projoint_results","text":"Creates publication-ready plots projoint_results object produced projoint. Supports profile-level choice-level analyses, plotting options tailored structure.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/plot.projoint_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot method for projoint_results ‚Äî plot.projoint_results","text":"","code":"# S3 method for class 'projoint_results' plot(   x,   .estimates = \"corrected\",   .by_var = FALSE,   .labels = NULL,   .base_size = 12,   .base_family = \"\",   .type = c(\"bar\", \"pointrange\"),   .show_attribute = TRUE,   .remove_xaxis = FALSE,   .xlim = c(0, 1),   .plot.margin = c(0, 3, 0, 3),   ... )"},{"path":"https://yhoriuchi.github.io/projoint/reference/plot.projoint_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot method for projoint_results ‚Äî plot.projoint_results","text":"x projoint_results object (typically projoint). .estimates Character: estimates plot. One \"corrected\", \"uncorrected\", \"\" (profile-level), \"corrected\" \"uncorrected\" (choice-level). Default \"corrected\". .by_var Logical (profile-level ). Whether plot subgroup differences. Default FALSE. .labels Character vector length 2 (choice-level ). Custom x-axis labels bar/pointrange plots. NULL, labels taken x$labels. .base_size Numeric. Base font size. Default 12. .base_family Character. Base font family. Default \"\" (system default). .type Character (choice-level ). One \"bar\" \"pointrange\". Default \"bar\". .show_attribute Logical (choice-level ). Show attribute name title levels belong attribute. Default TRUE. .remove_xaxis Logical (choice-level ). Remove x-axis line, ticks, labels. Default FALSE. .xlim Numeric length-2 vector (choice-level ). X-axis limits. Default c(0, 1). .plot.margin Numeric length-4 vector (choice-level ). Plot margins cm: c(top, left, bottom, right). Default c(0, 3, 0, 3). ... Additional arguments passed downstream plotting helpers.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/plot.projoint_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot method for projoint_results ‚Äî plot.projoint_results","text":"ggplot2 object.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/plot.projoint_results.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot method for projoint_results ‚Äî plot.projoint_results","text":"profile-level results, .by_var, .base_size, .base_family relevant. choice-level results, .type, .labels, .show_attribute, .remove_xaxis, .xlim, .plot.margin relevant. Irrelevant arguments ignored warning.","code":""},{"path":[]},{"path":"https://yhoriuchi.github.io/projoint/reference/plot.projoint_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot method for projoint_results ‚Äî plot.projoint_results","text":"","code":"# \\donttest{ data(exampleData1)  # Two base tasks (1 & 2) + repeated of task 1 (last) dat <- reshape_projoint(   exampleData1,   .outcomes = c(\"choice1\", \"choice2\", \"choice1_repeated_flipped\") )  # Build a valid QOI from the labels att <- unique(dat$labels$attribute_id)[1] levs <- subset(dat$labels, attribute_id == att)$level_id lev_names <- sub(\".*:\", \"\", levs)  q <- set_qoi(   .structure     = \"choice_level\",   .estimand      = \"mm\",   .att_choose    = att,   .lev_choose    = lev_names[2],   .att_notchoose = att,   .lev_notchoose = lev_names[1] )  fit <- projoint(dat, .qoi = q)  # Plot method plot(fit)  # }"},{"path":"https://yhoriuchi.github.io/projoint/reference/plot.projoint_tau.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot method for projoint_tau ‚Äî plot.projoint_tau","title":"Plot method for projoint_tau ‚Äî plot.projoint_tau","text":"Visualizes estimated intra-respondent reliability (\\(\\tau\\)) produced extrapolation method stored projoint_tau object.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/plot.projoint_tau.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot method for projoint_tau ‚Äî plot.projoint_tau","text":"","code":"# S3 method for class 'projoint_tau' plot(x, ...)"},{"path":"https://yhoriuchi.github.io/projoint/reference/plot.projoint_tau.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot method for projoint_tau ‚Äî plot.projoint_tau","text":"x projoint_tau object. ... Optional arguments (currently unused).","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/plot.projoint_tau.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot method for projoint_tau ‚Äî plot.projoint_tau","text":"ggplot2 object representing IRR (\\(\\tau\\)) visualization.   plot drawn side effect also returned (invisibly).","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/plot.projoint_tau.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot method for projoint_tau ‚Äî plot.projoint_tau","text":"","code":"# \\donttest{ # Estimate tau, then plot: # dat <- reshape_projoint(exampleData1, .outcomes = c(\"choice1\",\"choice2\")) # tau_fit <- projoint_tau(dat)  # or predict_tau(dat) # p <- plot(tau_fit)            # also returns the ggplot object (invisibly) # }"},{"path":"https://yhoriuchi.github.io/projoint/reference/plot_projoint_choice_level_mm.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot choice-level marginal means (MMs) (helper) ‚Äî plot_projoint_choice_level_mm","title":"Plot choice-level marginal means (MMs) (helper) ‚Äî plot_projoint_choice_level_mm","text":"Internal helper used plot.projoint_results render choice-level marginal means (MMs). Supports bar chart horizontal pointrange layout optional custom level labels.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/plot_projoint_choice_level_mm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot choice-level marginal means (MMs) (helper) ‚Äî plot_projoint_choice_level_mm","text":"","code":"plot_projoint_choice_level_mm(   x,   .type = \"pointrange\",   .estimates = \"corrected\",   .labels = NULL,   .show_attribute = TRUE,   .remove_xaxis = FALSE,   .xlim = c(0, 1),   .plot.margin = c(top = 1, left = 2, bottom = 1, right = 2),   ... )"},{"path":"https://yhoriuchi.github.io/projoint/reference/plot_projoint_choice_level_mm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot choice-level marginal means (MMs) (helper) ‚Äî plot_projoint_choice_level_mm","text":"x projoint_results object produced projoint structure = \"choice_level\" estimand = \"mm\". .type Character. Either \"bar\" (two bars CIs) \"pointrange\" (horizontal estimate CI level labels extremes). Default \"pointrange\". .estimates Character. estimate version plot: \"corrected\" (default) \"uncorrected\". .labels Optional character vector length 2 custom level labels (left/right). NULL, labels derived x$labels. .show_attribute Logical; TRUE (default), add attribute name title levels attribute. .remove_xaxis Logical; TRUE, remove x-axis line, ticks, labels (useful embedding). Default FALSE. .xlim Numeric length-2 giving x-axis limits. Default c(0, 1). .plot.margin Numeric vector plot margins cm, c(top, left, bottom, right). Default c(1, 2, 1, 2). ... Currently unused (reserved future extensions).","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/plot_projoint_choice_level_mm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot choice-level marginal means (MMs) (helper) ‚Äî plot_projoint_choice_level_mm","text":"ggplot2 object.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/plot_projoint_choice_level_mm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot choice-level marginal means (MMs) (helper) ‚Äî plot_projoint_choice_level_mm","text":"helper expects projoint_results object already contains single pair choice-level MMs (.e., one att_level_choose one att_level_notchoose). called internally plot.projoint_results x$structure == \"choice_level\" x$estimand == \"mm\". .type = \"pointrange\", level labels placed just outside .xlim avoid overlap confidence interval. two levels correspond different attributes, attribute title omitted message emitted.","code":""},{"path":[]},{"path":"https://yhoriuchi.github.io/projoint/reference/plot_projoint_choice_level_mm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot choice-level marginal means (MMs) (helper) ‚Äî plot_projoint_choice_level_mm","text":"","code":"data(exampleData1) dat <- reshape_projoint(exampleData1,   .outcomes = c(\"choice1\", \"choice2\", \"choice1_repeated_flipped\") ) att <- unique(dat$labels$attribute_id)[1] levs <- subset(dat$labels, attribute_id == att)$level_id lev_names <- sub(\".*:\", \"\", levs) q <- set_qoi(\"choice_level\", \"mm\",   .att_choose = att, .lev_choose = lev_names[2],   .att_notchoose = att, .lev_notchoose = lev_names[1] ) fit <- projoint(dat, .qoi = q) plot(fit)"},{"path":"https://yhoriuchi.github.io/projoint/reference/plot_projoint_profile_level.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot all profile-level MMs or AMCEs (helper) ‚Äî plot_projoint_profile_level","title":"Plot all profile-level MMs or AMCEs (helper) ‚Äî plot_projoint_profile_level","text":"Internal helper used plot.projoint_results render profile-level marginal means (MMs) AMCEs.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/plot_projoint_profile_level.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot all profile-level MMs or AMCEs (helper) ‚Äî plot_projoint_profile_level","text":"","code":"plot_projoint_profile_level(   x,   .estimates = \"corrected\",   .by_var = FALSE,   .base_size = 12,   .base_family = \"\",   ... )"},{"path":"https://yhoriuchi.github.io/projoint/reference/plot_projoint_profile_level.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot all profile-level MMs or AMCEs (helper) ‚Äî plot_projoint_profile_level","text":"x projoint_results object (profile-level). .estimates \"corrected\", \"uncorrected\", \"\". .by_var Logical; TRUE, plot subgroup differences. .base_size Base font size (pts). .base_family Base font family. ... Additional options passed internally.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/plot_projoint_profile_level.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot all profile-level MMs or AMCEs (helper) ‚Äî plot_projoint_profile_level","text":"ggplot2 object.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/plot_projoint_profile_level.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot all profile-level MMs or AMCEs (helper) ‚Äî plot_projoint_profile_level","text":"","code":"# \\donttest{ # Normally use: plot(fit_profile) # The helper is internal and called by plot.projoint_results(): # dat <- reshape_projoint(exampleData1, .outcomes = c(\"choice1\",\"choice2\")) # fit_profile <- projoint(dat, .structure = \"profile_level\") # p <- projoint:::plot_projoint_profile_level(fit_profile, .estimates = \"both\") # print(p) # }"},{"path":"https://yhoriuchi.github.io/projoint/reference/predict_tau.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate intra-respondent reliability (tau) without a repeated task ‚Äî predict_tau","title":"Estimate intra-respondent reliability (tau) without a repeated task ‚Äî predict_tau","text":"Uses extrapolation method estimate intra-respondent reliability (IRR, \\(\\tau\\)) conjoint design include explicit repeated task. input projoint_data object (e.g., produced reshape_projoint).","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/predict_tau.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate intra-respondent reliability (tau) without a repeated task ‚Äî predict_tau","text":"","code":"predict_tau(.data, .title = NULL)"},{"path":"https://yhoriuchi.github.io/projoint/reference/predict_tau.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate intra-respondent reliability (tau) without a repeated task ‚Äî predict_tau","text":".data projoint_data object (reshape_projoint). .title Optional character string used plot title prefix.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/predict_tau.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate intra-respondent reliability (tau) without a repeated task ‚Äî predict_tau","text":"projoint_tau object (list-like) components: $irr: tibble columns x (number differing attributes)         predicted (fitted agreement), including x = 0 estimate         \\(\\tau\\). $figure: ggplot2 object visualizing observed agreement x         fitted line extrapolated point x = 0.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/predict_tau.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate intra-respondent reliability (tau) without a repeated task ‚Äî predict_tau","text":"procedure constructs pairs base tasks within respondent, computes proportion identical choices function many attributes differ two tasks, fits weighted regression agreement number differing attributes, extrapolates zero differences obtain \\(\\hat{\\tau}\\).","code":""},{"path":[]},{"path":"https://yhoriuchi.github.io/projoint/reference/predict_tau.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate intra-respondent reliability (tau) without a repeated task ‚Äî predict_tau","text":"","code":"# \\donttest{ # Example workflow: data(exampleData1) outcomes <- c(paste0(\"choice\", 1:8), \"choice1_repeated_flipped\")  # Even if your real study lacks a repeated task, this shows the API: pj <- reshape_projoint(exampleData1, outcomes, .repeated = TRUE)  tau_fit <- predict_tau(pj, .title = \"IRR (tau): \") # Inspect the extrapolated tau (row where x == 0) tau_fit$irr[tau_fit$irr$x == 0, ] #> # A tibble: 1 √ó 2 #>       x predicted #>   <int>     <dbl> #> 1     0     0.743  # Plot (also available via plot(tau_fit)) print(tau_fit$figure)  # }"},{"path":"https://yhoriuchi.github.io/projoint/reference/print.projoint_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a projoint_data object ‚Äî print.projoint_data","title":"Print a projoint_data object ‚Äî print.projoint_data","text":"Custom print method objects class projoint_data.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/print.projoint_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a projoint_data object ‚Äî print.projoint_data","text":"","code":"# S3 method for class 'projoint_data' print(x, ...)"},{"path":"https://yhoriuchi.github.io/projoint/reference/print.projoint_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a projoint_data object ‚Äî print.projoint_data","text":"x projoint_data object. ... Additional arguments (currently unused).","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/print.projoint_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a projoint_data object ‚Äî print.projoint_data","text":"return value, called side effect printing summary   projoint_data object console.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/print.projoint_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a projoint_data object ‚Äî print.projoint_data","text":"","code":"# \\donttest{ data(exampleData1) dat <- reshape_projoint(   exampleData1,   .outcomes = c(\"choice1\", \"choice2\") ) print(dat) #> <projoint_data> #> - data:     800 rows, 13 columns #> - labels:   24 levels, 4 columns # }"},{"path":"https://yhoriuchi.github.io/projoint/reference/print.projoint_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for projoint_results ‚Äî print.projoint_results","title":"Print method for projoint_results ‚Äî print.projoint_results","text":"Custom print method objects class projoint_results.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/print.projoint_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for projoint_results ‚Äî print.projoint_results","text":"","code":"# S3 method for class 'projoint_results' print(x, ...)"},{"path":"https://yhoriuchi.github.io/projoint/reference/print.projoint_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for projoint_results ‚Äî print.projoint_results","text":"x object class projoint_results. ... Additional arguments (ignored).","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/print.projoint_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for projoint_results ‚Äî print.projoint_results","text":"return value, called side effect printing summary   projoint_results object console.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/print.projoint_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print method for projoint_results ‚Äî print.projoint_results","text":"","code":"# \\donttest{ data(exampleData1) dat <- reshape_projoint(   exampleData1,   .outcomes = c(\"choice1\", \"choice2\", \"choice1_repeated_flipped\") ) att <- unique(dat$labels$attribute_id)[1] levs <- subset(dat$labels, attribute_id == att)$level_id lev_names <- sub(\".*:\", \"\", levs) q <- set_qoi(   .structure     = \"choice_level\",   .estimand      = \"mm\",   .att_choose    = att,   .lev_choose    = lev_names[2],   .att_notchoose = att,   .lev_notchoose = lev_names[1] ) fit <- projoint(dat, .qoi = q) print(fit) #>  #> Projoint results object #> ------------------------- #> Estimand:  mm  #> Structure:  choice_level  #> Standard error method:  analytical  #> IRR:  Estimated  #> Tau:  0.172  #> Number of estimates:  2  # }"},{"path":"https://yhoriuchi.github.io/projoint/reference/print.projoint_tau.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for projoint_tau objects ‚Äî print.projoint_tau","title":"Print method for projoint_tau objects ‚Äî print.projoint_tau","text":"Custom print method objects class projoint_tau, typically created predict_tau related functions.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/print.projoint_tau.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for projoint_tau objects ‚Äî print.projoint_tau","text":"","code":"# S3 method for class 'projoint_tau' print(x, ...)"},{"path":"https://yhoriuchi.github.io/projoint/reference/print.projoint_tau.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for projoint_tau objects ‚Äî print.projoint_tau","text":"x object class projoint_tau. ... Additional arguments (currently unused).","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/print.projoint_tau.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for projoint_tau objects ‚Äî print.projoint_tau","text":"return value, called side effect printing summary   estimated intra-respondent reliability (\\(\\tau\\)).","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/print.projoint_tau.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print method for projoint_tau objects ‚Äî print.projoint_tau","text":"","code":"# \\donttest{ # Example workflow: # tau_fit <- projoint_tau(exampleData1) # print(tau_fit) # }"},{"path":"https://yhoriuchi.github.io/projoint/reference/projoint.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyze a conjoint dataset with measurement-error correction ‚Äî projoint","title":"Analyze a conjoint dataset with measurement-error correction ‚Äî projoint","text":"Computes marginal means (MMs) average marginal component effects (AMCEs) correction intra-respondent reliability (IRR, \\(\\tau\\)). repeated task present, IRR estimated unless fixed value supplied. Results returned structured object ready plotting summary.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/projoint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyze a conjoint dataset with measurement-error correction ‚Äî projoint","text":"","code":"projoint(   .data,   .qoi = NULL,   .by_var = NULL,   .structure = \"choice_level\",   .estimand = \"mm\",   .se_method = \"analytical\",   .irr = NULL,   .remove_ties = TRUE,   .ignore_position = NULL,   .n_sims = NULL,   .n_boot = NULL,   .weights_1 = NULL,   .clusters_1 = NULL,   .se_type_1 = NULL,   .weights_2 = NULL,   .clusters_2 = NULL,   .se_type_2 = NULL,   .auto_cluster = TRUE,   .seed = NULL )"},{"path":"https://yhoriuchi.github.io/projoint/reference/projoint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyze a conjoint dataset with measurement-error correction ‚Äî projoint","text":".data projoint_data created reshape_projoint make_projoint_data. .qoi Optional projoint_qoi describing quantity interest. supplied, fields override .structure .estimand. .by_var Optional column name (character) subgroup analysis; must logical (TRUE/FALSE) numeric/integer coded 0/1. supported .structure == \"profile_level\" (ignored otherwise). .structure Either \"profile_level\" \"choice_level\" (default \"choice_level\"). Overridden .qoi$structure present. .estimand Either \"mm\" (marginal mean) \"amce\" (average marginal component effect). Default \"mm\". Overridden .qoi$estimand present. .se_method Standard-error method: \"analytical\" (default), \"simulation\", \"bootstrap\". .irr Numeric NULL. NULL (default), IRR estimated (design allows); otherwise fixed IRR value used IRR estimation skipped. .remove_ties Logical; remove ties choice data estimation? Default TRUE. .ignore_position Logical; choice-level . Ignore profile position (left/right)? Default TRUE. .n_sims Integer; required .se_method = \"simulation\". .n_boot Integer; required .se_method = \"bootstrap\". .weights_1, .clusters_1, .se_type_1 Passed lm_robust estimating IRR. .weights_2, .clusters_2, .se_type_2 Passed lm_robust estimating MMs/AMCEs. .auto_cluster Logical. TRUE (default), automatically cluster id column present .clusters_* supplied. Auto-clustering occurs corresponding .se_type_* NULL. .seed Optional integer. Sets temporary RNG seed reproducible simulation/bootstrap inside call; restores previous RNG state exit.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/projoint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analyze a conjoint dataset with measurement-error correction ‚Äî projoint","text":"projoint_results object (list-like) components : $estimand, $structure, $se_method, $irr, $tau $labels: attribute/level mapping used estimation $estimates: data frame estimates columns like         att_level_choose, att_level_notchoose (choice-level),         estimate, se / std.error, conf.low, conf.high,         estimand label \"mm_corrected\" \"amce_uncorrected\". object suitable downstream use plot.projoint_results, summary.projoint_results, related helpers.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/projoint.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Analyze a conjoint dataset with measurement-error correction ‚Äî projoint","text":"users pass projoint_data object (reshape_projoint make_projoint_data). Advanced users may specify custom quantities via projoint_qoi; provided, structure estimand override .structure .estimand. Valid se_type_* values depend clustering: Without clusters: \"classical\", \"HC0\", \"HC1\", \"HC2\", \"HC3\" clusters: \"CR0\", \"CR1\", \"CR2\", \"stata\", \"none\" NULL, estimatr defaults used (HC2 unclustered; CR2 clustered).","code":""},{"path":[]},{"path":"https://yhoriuchi.github.io/projoint/reference/projoint.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analyze a conjoint dataset with measurement-error correction ‚Äî projoint","text":"","code":"# \\donttest{ # Prepare example data data(exampleData1) outcomes <- c(paste0(\"choice\", 1:8), \"choice1_repeated_flipped\") pj <- reshape_projoint(exampleData1, outcomes)  # Choice-level QoI based on pj$labels att <- unique(pj$labels$attribute_id)[1] lev_ids   <- pj$labels$level_id[pj$labels$attribute_id == att] lev_names <- sub(\".*:\", \"\", lev_ids)  q <- set_qoi(     .structure     = \"choice_level\",     .estimand      = \"mm\",     .att_choose    = att,     .lev_choose    = lev_names[2],     .att_notchoose = att,     .lev_notchoose = lev_names[1]   )    # Choice-level, marginal means (fast example: fix IRR) fit_choice <- projoint(   pj,   .qoi = q,   .structure = \"choice_level\",   .estimand  = \"mm\",   .irr       = 0.80,        # skip IRR estimation for a quick example   .se_method = \"analytical\" ) head(summary(fit_choice)) #>  #> Summary of Projoint Estimates #> ------------------------------ #> Estimand: mm #> Structure: choice_level #> Standard error method: analytical #> SE type (lm_robust):   CR2 (clustered by id) #> IRR: Assumed (0.8) #> Tau: 0.113 #>  #> # A tibble: 2 √ó 7 #>   estimand       estimate     se conf.low conf.high att_level_choose #>   <chr>             <dbl>  <dbl>    <dbl>     <dbl> <chr>            #> 1 mm_uncorrected    0.432 0.0195    0.394     0.471 att1:level2      #> 2 mm_corrected      0.413 0.0251    0.363     0.462 att1:level2      #> # ‚Ñπ 1 more variable: att_level_notchoose <chr>  # Profile-level AMCEs fit_profile <- projoint(   pj,   .structure = \"profile_level\",   .estimand  = \"amce\",   .se_method = \"analytical\" ) #> Warning: AMCE analytical SEs: CR2 produced non-PSD/NA variances; fell back to se_type='stata' (then HC1 if needed). #> Warning: AMCE analytical SEs: CR2 produced non-PSD/NA variances; fell back to se_type='stata' (then HC1 if needed). #> Warning: AMCE analytical SEs: CR2 produced non-PSD/NA variances; fell back to se_type='stata' (then HC1 if needed). #> Warning: AMCE analytical SEs: CR2 produced non-PSD/NA variances; fell back to se_type='stata' (then HC1 if needed). # Plot using the S3 plot method p <- plot(fit_profile, .estimates = \"both\") print(p)  # }"},{"path":"https://yhoriuchi.github.io/projoint/reference/projoint_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a projoint_data Object ‚Äî projoint_data","title":"Create a projoint_data Object ‚Äî projoint_data","text":"Internal constructor projoint_data objects. Used reshape_projoint make_projoint_data bundle conjoint survey labels response data consistent structure.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/projoint_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a projoint_data Object ‚Äî projoint_data","text":"","code":"projoint_data(labels, data)"},{"path":"https://yhoriuchi.github.io/projoint/reference/projoint_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a projoint_data Object ‚Äî projoint_data","text":"labels data frame conjoint attribute‚Äìlevel metadata. Must include attribute names, attribute IDs (e.g., \"att1\"), level IDs (e.g., \"att1:lev1\"). data data frame (typically tibble) containing reshaped conjoint survey responses, one row per respondent‚Äìtask‚Äìprofile, attribute columns, selected, agree, covariates.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/projoint_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a projoint_data Object ‚Äî projoint_data","text":"list length two class \"projoint_data\", containing: $labels: attribute‚Äìlevel mapping $data: respondent‚Äìtask‚Äìprofile dataset","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/projoint_diff.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate subgroup differences (internal) ‚Äî projoint_diff","title":"Estimate subgroup differences (internal) ‚Äî projoint_diff","text":"Worker used projoint compute subgroup differences (group == 1 minus group == 0) marginal means (MMs) average marginal component effects (AMCEs). Supported .structure = \"profile_level\".","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/projoint_diff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate subgroup differences (internal) ‚Äî projoint_diff","text":"","code":"projoint_diff(   .data,   .qoi,   .by_var,   .structure,   .estimand,   .se_method,   .irr,   .remove_ties,   .ignore_position,   .n_sims,   .n_boot,   .weights_1,   .clusters_1,   .se_type_1,   .weights_2,   .clusters_2,   .se_type_2,   .auto_cluster = TRUE,   .seed = NULL )"},{"path":"https://yhoriuchi.github.io/projoint/reference/projoint_diff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate subgroup differences (internal) ‚Äî projoint_diff","text":".data projoint_data object. .qoi Optional projoint_qoi; NULL, estimates MMs/AMCEs. .by_var Column name .data$data defining subgroups; must logical, numeric/integer coded 0/1, factor levels \"0\"/\"1\". .structure Must \"profile_level\". .estimand Either \"mm\" \"amce\". .se_method One \"analytical\", \"simulation\", \"bootstrap\". .irr NULL estimate IRR repeated tasks, numeric fix IRR. .remove_ties Logical; drop ties estimation? Default TRUE. .ignore_position Ignored (subgroup analysis profile-level ). .n_sims Integer; required .se_method = \"simulation\". .n_boot Integer; required .se_method = \"bootstrap\". .weights_1, .clusters_1, .se_type_1 Passed lm_robust IRR estimation. .weights_2, .clusters_2, .se_type_2 Passed lm_robust MM/AMCE estimation. .auto_cluster Logical; TRUE (default), auto-cluster id suitable clusters provided (applies corresponding .se_type_* NULL). .seed Optional integer; sets temporary RNG seed restores prior state exit.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/projoint_diff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate subgroup differences (internal) ‚Äî projoint_diff","text":"projoint_results object containing subgroup differences fields: estimates: tibble one row per attribute/level columns         like estimate (group1 minus group0), se, conf.low,         conf.high, plus internal columns (estimate_1, estimate_0,         se_1, se_0) used diff. estimand: \"mm\" \"amce\". structure: \"profile_level\". se_method: SE method used. irr: \"Estimated\" \"Assumed (<value> )\". tau: numeric reliability used (average subgroup taus estimated). remove_ties, ignore_position: flags echoed inputs. se_type_used, cluster_by: details propagated fitting calls. labels, data: design labels analysis data (passed ).","code":""},{"path":[]},{"path":"https://yhoriuchi.github.io/projoint/reference/projoint_level.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate profile- or choice-level effects (internal) ‚Äî projoint_level","title":"Estimate profile- or choice-level effects (internal) ‚Äî projoint_level","text":"Core worker used projoint compute marginal means (MMs) average marginal component effects (AMCEs) either profile- choice-level structure. Handles IRR usage (estimated fixed) requested standard-error method.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/projoint_level.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate profile- or choice-level effects (internal) ‚Äî projoint_level","text":"","code":"projoint_level(   .data,   .qoi,   .structure,   .estimand,   .se_method,   .irr,   .remove_ties,   .ignore_position,   .n_sims,   .n_boot,   .weights_1,   .clusters_1,   .se_type_1,   .weights_2,   .clusters_2,   .se_type_2,   .auto_cluster = TRUE,   .seed = NULL )"},{"path":"https://yhoriuchi.github.io/projoint/reference/projoint_level.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate profile- or choice-level effects (internal) ‚Äî projoint_level","text":".data projoint_data object. .qoi Optional projoint_qoi; NULL, estimates MMs/AMCEs implied design. supplied, overrides .structure .estimand. .structure Either \"profile_level\" \"choice_level\". .estimand Either \"mm\" (marginal mean) \"amce\" (average marginal component effect). .se_method One \"analytical\", \"simulation\", \"bootstrap\". .irr NULL estimate IRR repeated tasks; numeric fix IRR. .remove_ties Logical; whether drop tied responses (default TRUE). .ignore_position Logical; choice-level . Ignore left/right position? Default TRUE. .n_sims Integer; required .se_method = \"simulation\". .n_boot Integer; required .se_method = \"bootstrap\". .weights_1, .clusters_1, .se_type_1 Arguments passed lm_robust IRR estimation. .se_type_1 NULL, estimatr defaults used. .weights_2, .clusters_2, .se_type_2 Arguments passed lm_robust MM/AMCE estimation. .se_type_2 NULL, estimatr defaults used. .auto_cluster Logical; TRUE (default) id column present clusters provided, cluster automatically. applied corresponding .se_type_* NULL. .seed Optional integer; supplied, sets temporary RNG seed simulation/bootstrap restores prior state exit.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/projoint_level.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate profile- or choice-level effects (internal) ‚Äî projoint_level","text":"projoint_results object containing: estimates: tibble estimates (point estimate, SE, CI)         identifier columns (e.g., att_level_*). estimand: \"mm\" \"amce\". structure: \"profile_level\" \"choice_level\". se_method: SE computation method used. irr: character noting IRR usage (e.g., \"Estimated\"         \"Assumed (<value> )\"). tau: numeric \\(\\tau\\) used correct measurement error. remove_ties, ignore_position: flags echoed inputs. se_type_used, cluster_by: details propagated         fitting calls (available). labels, data: design labels analysis data         passed downstream methods.","code":""},{"path":[]},{"path":"https://yhoriuchi.github.io/projoint/reference/projoint_qoi.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a projoint_qoi Object ‚Äî projoint_qoi","title":"Create a projoint_qoi Object ‚Äî projoint_qoi","text":"Internal constructor projoint_qoi objects. projoint_qoi stores specification custom quantities interest (QOIs) conjoint estimation. Typically called set_qoi rather directly.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/projoint_qoi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a projoint_qoi Object ‚Äî projoint_qoi","text":"","code":"projoint_qoi(...)"},{"path":"https://yhoriuchi.github.io/projoint/reference/projoint_qoi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a projoint_qoi Object ‚Äî projoint_qoi","text":"... Named elements specifying QOI details, : structure: Analysis level (\"profile_level\" \"choice_level\"). estimand: Quantity interest (\"mm\" \"amce\"). attribute_of_interest, levels_of_interest, etc.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/projoint_qoi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a projoint_qoi Object ‚Äî projoint_qoi","text":"list QOI specifications class \"projoint_qoi\".","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/projoint_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a projoint_results Object ‚Äî projoint_results","title":"Create a projoint_results Object ‚Äî projoint_results","text":"Internal constructor projoint_results objects. projoint_results stores outputs conjoint analysis, including estimated effects metadata analysis settings. normally generated projoint called directly.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/projoint_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a projoint_results Object ‚Äî projoint_results","text":"","code":"projoint_results(...)"},{"path":"https://yhoriuchi.github.io/projoint/reference/projoint_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a projoint_results Object ‚Äî projoint_results","text":"... Named elements, typically including: estimates: data frame estimated effects (point estimates,     standard errors, confidence intervals). labels: Attribute/level label mappings design. structure: Either \"profile_level\" \"choice_level\". estimand: Either \"mm\" (marginal mean)     \"amce\" (average marginal component effect). irr: Intra-respondent reliability value used. tau: Estimated \\(\\tau\\) value IRR correction. se_method: Method used standard errors.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/projoint_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a projoint_results Object ‚Äî projoint_results","text":"list class \"projoint_results\" containing   estimates associated metadata. object standard   output projoint accepted plotting   summary methods.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/projoint_tau.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a projoint_tau Object ‚Äî projoint_tau","title":"Create a projoint_tau Object ‚Äî projoint_tau","text":"Internal constructor projoint_tau objects. projoint_tau stores intra-respondent reliability (IRR) estimates obtained via extrapolation method, along diagnostic figure. normally created predict_tau called directly.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/projoint_tau.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a projoint_tau Object ‚Äî projoint_tau","text":"","code":"projoint_tau(irr, figure)"},{"path":"https://yhoriuchi.github.io/projoint/reference/projoint_tau.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a projoint_tau Object ‚Äî projoint_tau","text":"irr tibble (data frame) containing predicted IRR values function number differing attributes task pairs. Must include least columns x (number differing attributes) predicted (estimated reliability). figure ggplot2 object showing extrapolation plot IRR versus number differing attributes.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/projoint_tau.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a projoint_tau Object ‚Äî projoint_tau","text":"list class \"projoint_tau\" elements: irr: Tibble IRR estimates predictions. figure: ggplot2 object diagnostic plot.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/read_Qualtrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and re-format a Qualtrics CSV (choice text) ‚Äî read_Qualtrics","title":"Read and re-format a Qualtrics CSV (choice text) ‚Äî read_Qualtrics","text":"Reads CSV file exported Qualtrics (\"Use choice text\" enabled) returns data frame formatted downstream processing reshape_projoint.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/read_Qualtrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and re-format a Qualtrics CSV (choice text) ‚Äî read_Qualtrics","text":"","code":"read_Qualtrics(.file)"},{"path":"https://yhoriuchi.github.io/projoint/reference/read_Qualtrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and re-format a Qualtrics CSV (choice text) ‚Äî read_Qualtrics","text":".file character string giving path Qualtrics CSV file.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/read_Qualtrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and re-format a Qualtrics CSV (choice text) ‚Äî read_Qualtrics","text":"data frame column names preserved Qualtrics export.   first two rows Qualtrics metadata skipped automatically.","code":""},{"path":[]},{"path":"https://yhoriuchi.github.io/projoint/reference/read_Qualtrics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read and re-format a Qualtrics CSV (choice text) ‚Äî read_Qualtrics","text":"","code":"# \\donttest{ # Write a tiny dummy Qualtrics-style CSV to a temp file tmp <- tempfile(fileext = \".csv\") readr::write_csv(   data.frame(Q1 = c(\"Choice Text\", \"Choice Text\", \"A\", \"B\")),   tmp ) # Read it back in df <- read_Qualtrics(tmp) head(df) #> # A tibble: 2 √ó 1 #>   Q1    #>   <chr> #> 1 A     #> 2 B     # }"},{"path":"https://yhoriuchi.github.io/projoint/reference/read_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and apply a reordered attribute/level mapping ‚Äî read_labels","title":"Read and apply a reordered attribute/level mapping ‚Äî read_labels","text":"Reads CSV containing revised ordering attributes levels applies existing projoint_data object. Typical workflow: first save current labels CSV (e.g., save_labels), manually reorder rows (/attribute grouping) CSV, call read_labels() apply.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/read_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and apply a reordered attribute/level mapping ‚Äî read_labels","text":"","code":"read_labels(.data, .filename)"},{"path":"https://yhoriuchi.github.io/projoint/reference/read_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and apply a reordered attribute/level mapping ‚Äî read_labels","text":".data projoint_data object whose labels/data reordered. .filename Path revised labels CSV (originally produced package's labels).","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/read_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and apply a reordered attribute/level mapping ‚Äî read_labels","text":"projoint_data object content .data   attributes levels reordered match CSV. returned object contains: $labels: tibble new attribute_id level_id reflecting chosen order $data: tibble whose att* columns remapped new level_ids","code":""},{"path":[]},{"path":"https://yhoriuchi.github.io/projoint/reference/read_labels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read and apply a reordered attribute/level mapping ‚Äî read_labels","text":"","code":"# \\donttest{ # Create a projoint_data object from the example dataset data(exampleData1) outcomes <- c(paste0(\"choice\", 1:8), \"choice1_repeated_flipped\") pj <- reshape_projoint(exampleData1, outcomes)  # Write current labels to a temporary CSV, adding an 'order' column tmp <- tempfile(fileext = \".csv\") pj$labels |>   dplyr::mutate(order = dplyr::row_number()) |>   readr::write_csv(tmp)  # (User would reorder rows in 'tmp' manually; we just read it back) pj_reordered <- read_labels(pj, tmp)  # Inspect the updated label order head(pj_reordered$labels) #> # A tibble: 6 √ó 4 #>   attribute                level                        attribute_id level_id    #>   <chr>                    <chr>                        <chr>        <chr>       #> 1 Housing Cost             15% of pre-tax income        att1         att1:level1 #> 2 Housing Cost             30% of pre-tax income        att1         att1:level2 #> 3 Housing Cost             40% of pre-tax income        att1         att1:level3 #> 4 Presidential Vote (2020) 30% Democrat, 70% Republican att2         att2:level1 #> 5 Presidential Vote (2020) 50% Democrat, 50% Republican att2         att2:level2 #> 6 Presidential Vote (2020) 70% Democrat, 30% Republican att2         att2:level3 # }"},{"path":"https://yhoriuchi.github.io/projoint/reference/reshape_projoint.html","id":null,"dir":"Reference","previous_headings":"","what":"Reshape survey response data for conjoint analysis (single task set) ‚Äî reshape_projoint","title":"Reshape survey response data for conjoint analysis (single task set) ‚Äî reshape_projoint","text":"Takes wide survey data frame (e.g., read_Qualtrics) reshapes row corresponds single respondent‚Äìtask‚Äìprofile. Supports arbitrary ordering base tasks single repeated task per respondent. repeated base task inferred first base outcome .outcomes, repeated outcome must last element .outcomes.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/reshape_projoint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reshape survey response data for conjoint analysis (single task set) ‚Äî reshape_projoint","text":"","code":"reshape_projoint(   .dataframe,   .outcomes,   .choice_labels = c(\"A\", \"B\"),   .alphabet = \"K\",   .idvar = \"ResponseId\",   .repeated = TRUE,   .flipped = TRUE,   .covariates = NULL,   .fill = FALSE )"},{"path":"https://yhoriuchi.github.io/projoint/reference/reshape_projoint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reshape survey response data for conjoint analysis (single task set) ‚Äî reshape_projoint","text":".dataframe data frame, preferably read_Qualtrics. .outcomes Character vector outcome column names asked order. repeated task used, outcome must last element. .choice_labels Character vector (default c(\"\",\"B\")) giving two labels appear end outcome strings. .alphabet Single character (default \"K\") indicating Qualtrics prefix. .idvar Character (default \"ResponseId\") indicating respondent id column. .repeated Logical (default TRUE) indicating whether repeated task present. .flipped Logical (default TRUE) indicating whether repeated task flips profiles agreement computed. .covariates Optional character vector respondent-level covariate column names carry . .fill Logical (default FALSE). TRUE, fills agree within respondent across tasks described ‚ÄúFilling agreement‚Äù.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/reshape_projoint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reshape survey response data for conjoint analysis (single task set) ‚Äî reshape_projoint","text":"projoint_data object elements $labels $data; see Details.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/reshape_projoint.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reshape survey response data for conjoint analysis (single task set) ‚Äî reshape_projoint","text":"Scope assumptions One set conjoint tasks exactly two profiles per task (profiles 1 2). multi-set designs, call reshape_projoint() per set bind results. Expected input (Qualtrics K-codes) Wide columns named K-<task>-<attribute> (attribute names)         K-<task>-<profile>-<attribute> (level names), <task> 1..n         <profile> 1,2. Rows missing K-1-1 dropped empty tables (server hiccup safeguard). Outcome columns (.outcomes) List choice variables order asked. include repeated task,         outcome must last element. base tasks (last element), function extracts base task id         reading digits outcome name (e.g., \"choice4\", \"Q4\",         \"task04\" -> task 4). set base task ids extracted .outcomes must exactly match set         task ids present K-codes; otherwise error thrown. repeated base task inferred digits first base outcome         (.e., first element .outcomes, excluding final repeated outcome). Choice parsing selected profile parsed last character outcome string         matched .choice_labels. Ensure outcomes end labels (e.g.,         \"Candidate \"/\"Candidate B\"). outcomes numeric differently         formatted, pre-process adjust .choice_labels accordingly. Output projoint_data object : $labels: map human-readable attribute/level stable ids             (attribute_id = \"att1\",\"att2\",..., level_id = \"attX:levelY\"). $data: tibble one row per id‚Äìtask‚Äìprofile, attribute             columns (named att*) storing level_id, selected (1 profile             chosen; 0 otherwise), agree (1/0/NA repeated-task agreement flip logic),             .covariates. id coerced character; attribute columns factors. Filling agreement .fill = TRUE, agree filled within respondent across tasks task order,         propagating observed repeated-task agreement tasks respondent. assumes         IRR respondent-specific independent table content. Diagnostics dplyr::count(reshaped$data, task, profile) show exactly two rows per task. pj_estimate() later reports ‚Äúrows match specified attribute/level‚Äù, construct QoIs         reshaped$labels (use exact attX:levelY ids).","code":""},{"path":[]},{"path":"https://yhoriuchi.github.io/projoint/reference/reshape_projoint.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reshape survey response data for conjoint analysis (single task set) ‚Äî reshape_projoint","text":"","code":"# \\donttest{ # Base tasks asked in numeric order; repeated task corresponds to task 1 data(exampleData1) outcomes <- c(paste0(\"choice\", 1:8), \"choice1_repeated_flipped\") reshaped <- reshape_projoint(exampleData1, outcomes) dplyr::count(reshaped$data, task, profile)  # should be 2 per task #> # A tibble: 16 √ó 3 #>     task profile     n #>    <dbl>   <dbl> <int> #>  1     1       1   400 #>  2     1       2   400 #>  3     2       1   400 #>  4     2       2   400 #>  5     3       1   400 #>  6     3       2   400 #>  7     4       1   400 #>  8     4       2   400 #>  9     5       1   400 #> 10     5       2   400 #> 11     6       1   400 #> 12     6       2   400 #> 13     7       1   400 #> 14     7       2   400 #> 15     8       1   400 #> 16     8       2   400 # }"},{"path":"https://yhoriuchi.github.io/projoint/reference/save_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Save attribute and level labels to a CSV file ‚Äî save_labels","title":"Save attribute and level labels to a CSV file ‚Äî save_labels","text":"Saves attributes levels (order) projoint_data object, generated reshape_projoint, CSV file. enables manual reordering later re-import via read_labels.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/save_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save attribute and level labels to a CSV file ‚Äî save_labels","text":"","code":"save_labels(.data, .filename)"},{"path":"https://yhoriuchi.github.io/projoint/reference/save_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save attribute and level labels to a CSV file ‚Äî save_labels","text":".data projoint_data object. .filename character string giving name CSV file written.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/save_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save attribute and level labels to a CSV file ‚Äî save_labels","text":"return value, called side effects (writes CSV file).","code":""},{"path":[]},{"path":"https://yhoriuchi.github.io/projoint/reference/save_labels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save attribute and level labels to a CSV file ‚Äî save_labels","text":"","code":"# \\donttest{ library(projoint) data(exampleData1) reshaped <- reshape_projoint(   exampleData1,   .outcomes = c(paste0(\"choice\", 1:8), \"choice1_repeated_flipped\") ) tmpfile <- tempfile(fileext = \".csv\") save_labels(reshaped, tmpfile) readLines(tmpfile, n = 5)  # show first few lines #> [1] \"level_id,attribute,level,order\"                                          #> [2] \"att1:level1,Housing Cost,15% of pre-tax income,1\"                        #> [3] \"att1:level2,Housing Cost,30% of pre-tax income,2\"                        #> [4] \"att1:level3,Housing Cost,40% of pre-tax income,3\"                        #> [5] \"att2:level1,Presidential Vote (2020),\\\"30% Democrat, 70% Republican\\\",4\" # }"},{"path":"https://yhoriuchi.github.io/projoint/reference/set_qoi.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the quantities of interest (QoIs) ‚Äî set_qoi","title":"Set the quantities of interest (QoIs) ‚Äî set_qoi","text":"Constructs quantities--interest (QoI) specification projoint. Use request specific estimands‚Äîmarginal means (MMs) average marginal component effects (AMCEs)‚Äîeither choice- profile-level, declare attribute levels compared (including baselines).","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/set_qoi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the quantities of interest (QoIs) ‚Äî set_qoi","text":"","code":"set_qoi(   .structure = \"choice_level\",   .estimand = \"mm\",   .att_choose,   .lev_choose,   .att_notchoose = NULL,   .lev_notchoose = NULL,   .att_choose_b = NULL,   .lev_choose_b = NULL,   .att_notchoose_b = NULL,   .lev_notchoose_b = NULL )"},{"path":"https://yhoriuchi.github.io/projoint/reference/set_qoi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the quantities of interest (QoIs) ‚Äî set_qoi","text":".structure Either \"choice_level\" (default) \"profile_level\". .estimand Either \"mm\" marginal means \"amce\" average marginal component effects. .att_choose Character scalar: attribute (column) level(s) chosen. .lev_choose Character vector: level id(s) chosen side. Length 1 profile-level, \\(\\ge\\)1 choice-level. .att_notchoose Character scalar: attribute (column) level(s) chosen. used .structure == \"choice_level\". .lev_notchoose Character vector: level id(s) chosen side. Length 1 profile-level, \\(\\ge\\)1 choice-level. used .structure == \"choice_level\". .att_choose_b Character scalar: baseline attribute chosen side computing AMCEs. .lev_choose_b Character vector: baseline level id(s) chosen side computing AMCEs. Length 1 profile-level, \\(\\ge\\)1 choice-level. .att_notchoose_b Character scalar: baseline attribute -chosen side (choice-level ) computing AMCEs. .lev_notchoose_b Character vector: baseline level id(s) -chosen side (choice-level ) computing AMCEs.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/set_qoi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the quantities of interest (QoIs) ‚Äî set_qoi","text":"projoint_qoi object (list-like) containing fields :   structure, estimand, attribute_of_interest,   levels_of_interest, baseline counterparts. object   can supplied downstream estimation helpers accept QoI spec.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/set_qoi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the quantities of interest (QoIs) ‚Äî set_qoi","text":"","code":"# Specify a simple choice-level MM comparison for att1 levels: q_mm <- set_qoi(   .structure  = \"choice_level\",   .estimand   = \"mm\",   .att_choose = \"att1\",   .lev_choose = c(\"att1:lev2\"),   .att_notchoose = \"att1\",   .lev_notchoose = c(\"att1:lev1\") ) str(q_mm) #> List of 10 #>  $ structure                       : chr \"choice_level\" #>  $ estimand                        : chr \"mm\" #>  $ attribute_of_interest           : chr \"att1\" #>  $ levels_of_interest              : chr \"att1:lev2\" #>  $ attribute_of_interest_0         : chr \"att1\" #>  $ levels_of_interest_0            : chr \"att1:lev1\" #>  $ attribute_of_interest_baseline  : NULL #>  $ levels_of_interest_baseline     : NULL #>  $ attribute_of_interest_0_baseline: NULL #>  $ levels_of_interest_0_baseline   : NULL #>  - attr(*, \"class\")= chr \"projoint_qoi\"  # Example AMCE with explicit baselines (profile-level): q_amce <- set_qoi(   .structure   = \"profile_level\",   .estimand    = \"amce\",   .att_choose  = \"att2\",   .lev_choose  = \"att2:lev3\",   .att_choose_b = \"att2\",   .lev_choose_b = \"att2:lev1\" ) str(q_amce) #> List of 10 #>  $ structure                       : chr \"profile_level\" #>  $ estimand                        : chr \"amce\" #>  $ attribute_of_interest           : chr \"att2\" #>  $ levels_of_interest              : chr \"att2:lev3\" #>  $ attribute_of_interest_0         : NULL #>  $ levels_of_interest_0            : NULL #>  $ attribute_of_interest_baseline  : chr \"att2\" #>  $ levels_of_interest_baseline     : chr \"att2:lev1\" #>  $ attribute_of_interest_0_baseline: NULL #>  $ levels_of_interest_0_baseline   : NULL #>  - attr(*, \"class\")= chr \"projoint_qoi\""},{"path":"https://yhoriuchi.github.io/projoint/reference/summary.projoint_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary for projoint_data ‚Äî summary.projoint_data","title":"Summary for projoint_data ‚Äî summary.projoint_data","text":"Custom summary method objects class projoint_data. Prints brief overview main data attribute-level labels contained object.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/summary.projoint_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary for projoint_data ‚Äî summary.projoint_data","text":"","code":"# S3 method for class 'projoint_data' summary(object, ...)"},{"path":"https://yhoriuchi.github.io/projoint/reference/summary.projoint_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary for projoint_data ‚Äî summary.projoint_data","text":"object projoint_data object. ... Additional arguments (currently unused).","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/summary.projoint_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary for projoint_data ‚Äî summary.projoint_data","text":"return value, called side effect printing summary   projoint_data object console.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/summary.projoint_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary for projoint_data ‚Äî summary.projoint_data","text":"","code":"# \\donttest{ data(exampleData1) dat <- reshape_projoint(   exampleData1,   .outcomes = c(\"choice1\", \"choice2\") ) summary(dat) #> <Summary of projoint_data> #>  #> Main Data: #> - Number of rows: 800  #> - Number of columns: 13  #> - Sample columns: #> [1] \"id\"      \"task\"    \"profile\" \"att4\"    \"att7\"    #>  #> Attribute-Level Labels: #> - Number of levels: 24  #> - Attributes found: #> [1] \"Housing Cost\"                                       #> [2] \"Presidential Vote (2020)\"                           #> [3] \"Racial Composition\"                                 #> [4] \"School Quality\"                                     #> [5] \"Total Daily Driving Time for Commuting and Errands\" #> [6] \"Type of Place\"                                      #> [7] \"Violent Crime Rate (Vs National Rate)\"              # }"},{"path":"https://yhoriuchi.github.io/projoint/reference/summary.projoint_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for projoint_results ‚Äî summary.projoint_results","title":"Summary method for projoint_results ‚Äî summary.projoint_results","text":"Creates concise tabular summary projoint_results object, including chosen estimand, analysis structure, standard-error settings, data frame estimates.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/summary.projoint_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for projoint_results ‚Äî summary.projoint_results","text":"","code":"# S3 method for class 'projoint_results' summary(object, ...)"},{"path":"https://yhoriuchi.github.io/projoint/reference/summary.projoint_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for projoint_results ‚Äî summary.projoint_results","text":"object object class projoint_results. ... Additional arguments (ignored).","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/summary.projoint_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary method for projoint_results ‚Äî summary.projoint_results","text":"data frame (often tibble) summarizing estimated effects.   minimum, contains columns produced object$estimates   (e.g., attribute/level identifiers point estimate   standard error confidence interval columns   estimate, std.error, conf.low, conf.high).   table suitable processing printing.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/summary.projoint_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary method for projoint_results ‚Äî summary.projoint_results","text":"","code":"# \\donttest{   data(exampleData1)    # Reshape data for two base tasks + repeated (for IRR estimation)   dat <- reshape_projoint(     exampleData1,     .outcomes = c(\"choice1\", \"choice2\", \"choice1_repeated_flipped\")   )    # Build a valid choice-level QoI   att <- unique(dat$labels$attribute_id)[1]   lev_ids   <- dat$labels$level_id[dat$labels$attribute_id == att]   lev_names <- sub(\".*:\", \"\", lev_ids)    q <- set_qoi(     .structure     = \"choice_level\",     .estimand      = \"mm\",     .att_choose    = att,     .lev_choose    = lev_names[2],     .att_notchoose = att,     .lev_notchoose = lev_names[1]   )    # Fit model   fit <- projoint(dat, .qoi = q)    # Get the tabular summary of estimates   tab <- summary(fit) #>  #> Summary of Projoint Estimates #> ------------------------------ #> Estimand: mm #> Structure: choice_level #> Standard error method: analytical #> SE type (lm_robust):   CR2 (clustered by id) #> IRR: Estimated #> Tau: 0.172 #>    head(tab) #> # A tibble: 2 √ó 7 #>   estimand       estimate     se conf.low conf.high att_level_choose #>   <chr>             <dbl>  <dbl>    <dbl>     <dbl> <chr>            #> 1 mm_uncorrected    0.406 0.0361    0.334     0.477 att1:level2      #> 2 mm_corrected      0.356 0.0551    0.247     0.465 att1:level2      #> # ‚Ñπ 1 more variable: att_level_notchoose <chr> # }"},{"path":"https://yhoriuchi.github.io/projoint/reference/summary.projoint_tau.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for projoint_tau objects ‚Äî summary.projoint_tau","title":"Summary method for projoint_tau objects ‚Äî summary.projoint_tau","text":"Custom summary method objects class projoint_tau, typically created predict_tau related functions. Summarizes intra-respondent reliability (IRR) estimates.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/summary.projoint_tau.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for projoint_tau objects ‚Äî summary.projoint_tau","text":"","code":"# S3 method for class 'projoint_tau' summary(object, ...)"},{"path":"https://yhoriuchi.github.io/projoint/reference/summary.projoint_tau.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for projoint_tau objects ‚Äî summary.projoint_tau","text":"object object class projoint_tau. ... Additional arguments (currently unused).","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/summary.projoint_tau.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary method for projoint_tau objects ‚Äî summary.projoint_tau","text":"tibble (data frame) showing IRR estimates, typically number   differing attributes, stored object$irr.","code":""},{"path":"https://yhoriuchi.github.io/projoint/reference/summary.projoint_tau.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary method for projoint_tau objects ‚Äî summary.projoint_tau","text":"","code":"# \\donttest{ # Example workflow (assuming predict_tau is available): # tau_fit <- projoint_tau(exampleData1) # summary(tau_fit) # }"},{"path":"https://yhoriuchi.github.io/projoint/news/index.html","id":"projoint-010-2025-02-05","dir":"Changelog","previous_headings":"","what":"projoint 0.1.0 (2025-02-05)","title":"projoint 0.1.0 (2025-02-05)","text":"Initial release.","code":""},{"path":"https://yhoriuchi.github.io/projoint/news/index.html","id":"projoint-020-2025-04-20","dir":"Changelog","previous_headings":"","what":"projoint 0.2.0 (2025-04-20)","title":"projoint 0.2.0 (2025-04-20)","text":"Minor bug fixes documentation improvements. Major redesign website, including improved vignettes clearer step--step tutorial structure. Fixed input validation specifying inter-rater reliability (IRR), ensuring IRR values must 0.5 1.","code":""},{"path":"https://yhoriuchi.github.io/projoint/news/index.html","id":"projoint-030-2025-08-17","dir":"Changelog","previous_headings":"","what":"projoint 0.3.0 (2025-08-17)","title":"projoint 0.3.0 (2025-08-17)","text":"Robust SEs & clustering: fixes variance options; users can now pass arguments supported estimatr::lm_robust() clustering standard errors. reshape_projoint() overhaul: now robust arbitrary base-task orders, infers repeated base task first base outcome, requires repeated outcome last element .outcomes.","code":""},{"path":"https://yhoriuchi.github.io/projoint/news/index.html","id":"projoint-031-2025-08-18","dir":"Changelog","previous_headings":"","what":"projoint 0.3.1 (2025-08-18)","title":"projoint 0.3.1 (2025-08-18)","text":"Bug fix minor issue. Vignettes extended illustrate additional choice-level analyses.","code":""},{"path":"https://yhoriuchi.github.io/projoint/news/index.html","id":"projoint-100-2025-08-19","dir":"Changelog","previous_headings":"","what":"projoint 1.0.0 (2025-08-19)","title":"projoint 1.0.0 (2025-08-19)","text":"Initial CRAN release","code":""},{"path":"https://yhoriuchi.github.io/projoint/news/index.html","id":"projoint-101-2025-08-19","dir":"Changelog","previous_headings":"","what":"projoint 1.0.1 (2025-08-19)","title":"projoint 1.0.1 (2025-08-19)","text":"Fix CITATION: switched citEntry() bibentry(). Fixed README links (absolute URLs). Added Depends: R (>= 4.1.0). Removed duplicate Author field. Added cran-comments.md .Rbuildignore.","code":""},{"path":"https://yhoriuchi.github.io/projoint/news/index.html","id":"projoint-102-2025-08-21","dir":"Changelog","previous_headings":"","what":"projoint 1.0.2 (2025-08-21)","title":"projoint 1.0.2 (2025-08-21)","text":"CRAN resubmission: fix CITATION (use bibentry(), avoid install-time lookups). README: replace relative URLs; fix broken BibTeX link (use GitHub raw URL). DESCRIPTION: add aligned Author: alongside Authors@R. Bug fix: correct error message .irr user-specified. Robustness: skip IRR estimation (sim/boot) .irr fixed. Docs: new vignette ‚ÄúExplore‚Äù corresponding README/pkgdown links.","code":""},{"path":"https://yhoriuchi.github.io/projoint/news/index.html","id":"projoint-103-2025-08-21","dir":"Changelog","previous_headings":"","what":"projoint 1.0.3 (2025-08-21)","title":"projoint 1.0.3 (2025-08-21)","text":"DESCRIPTION: aligned Author: exactly CRAN‚Äôs derived Authors@R format (names ORCID link formatting) remove NOTE.","code":""},{"path":"https://yhoriuchi.github.io/projoint/news/index.html","id":"projoint-104-2025-08-21","dir":"Changelog","previous_headings":"","what":"projoint 1.0.4 (2025-08-21)","title":"projoint 1.0.4 (2025-08-21)","text":"Fixed DESCRIPTION metadata mismatch Author Authors@R fields, requested CRAN.","code":""},{"path":[]},{"path":"https://yhoriuchi.github.io/projoint/news/index.html","id":"improvements-1-0-5","dir":"Changelog","previous_headings":"","what":"Improvements","title":"projoint 1.0.5 (2025-09-10)","text":"Revised pj_estimate() automatically set appropriate standard-error option (se_type) depending clustering estimation method. exported methods now include \\value{} sections describing return values. Clearer examples choice-level analysis; removed commented-code. Improved description DESCRIPTION highlight profile-level choice-level estimators, IRR correction, visualization. Updated README pkgdown site emphasize choice-level analysis default recommended framework.","code":""},{"path":"https://yhoriuchi.github.io/projoint/news/index.html","id":"bug-fixes-1-0-5","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"projoint 1.0.5 (2025-09-10)","text":"Fixed reshape_projoint() docs (\\textrightarrow macro removed). Standardized return values summary(), plot(), print() methods match CRAN policies.","code":""}]
